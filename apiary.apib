FORMAT: 1A
HOST: http://dev2.letscaptivate.com/api

# Captivate API
Welcome to Captivate API.



# Users [/user]
In our Application all contacts are submitted by users. User can be *visitor*, *lead* or *user*

## User object
|Atrribute|Type|Description|
|:--------|----|-----------|
|user_id|string|The unique identifier for the user|
|app_id|App object|Link for application. Application ID.|
|owner_id|Admin object|The id of an admin that has been assigned account ownership of the contact.|
|acquired_at|datetime||
|company_ids|array||
|name|string|User name|
|owner_name|string|Owner name|
|pseudonym|string||
|display_as|string||
|email|string|User email|
|phone|string|User phone number|
|avatar|json||
|user_time|json||
|user_agent_data|json||
|last_heard_from_at|datetime||
|last_contacted_at|datetime||
|last_request_at|datetime||
|session_for_email_notification_started_at|datetime||
|last_request_at_ios|datetime||
|last_session_start|datetime||
|last_session_lasted|integer||
|last_seen_ip|string||
|remote_created_at|datetime||
|referral_url|string||
|session_count|integer||
|session_count_ios|integer||
|social_accounts|json||
|tag_ids|array||
|segment_ids|array||
|unsubscribed_from_emails|boolean||
|geoip_data|json||
|ios_app_name|string||
|ios_app_version|string||
|ios_device|string||
|ios_os_version|string||
|custom_data|json||
|android_app_name|string||
|android_app_version|string||
|android_device|string||
|android_os_version|string||
|browser_locale|string||
|language_override|string||
|last_request_at_android|string||
|session_count_android|integer||
|user_event_summaries|json||
|healthscore|integer||
|last_visited_url|string||
|has_device_token|string||
|role|string||
|enabled_push_messaging|boolean||
|is_mobile_unidentified|boolean||
|marked_email_as_spam|boolean||
|has_hard_bounce|boolean||
|last_email_opened_at|datetime||
|last_email_clicked_at|datetime||
|utm_campaign|string||
|utm_content|string||
|utm_medium|string||
|utm_source|string||
|utm_term|string||
|campaigns|array||
|conv_actions|json||
|link_clicks|json||
|camp_actions|json||

## List all users [GET]
You can fetch a list of all users.

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token 
    
    + Body 
            
            {}

+ Response 200 (application/json)

    + Body 

            [   // user 1
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "role": "user",
                    "custom_data": {},
                    "tag_ids": [
                      "5da9ddb2a4ce2d0010ad6f52"
                    ],
                    "email": "ktitorovk@gmail.com",
                    "name": "K Kostya",
                    "remote_created_at": "2019-01-03T12:50:00.000Z",
                    "user_event_summaries": {},
                    "user_id": null,
                    "acquired_at": null,
                    "company_ids": [
                      "5ddd668fd12b7f3820b1d281"
                    ],
                    "pseudonym": null,
                    "display_as": "K Kostya",
                    "phone": null,
                    "avatar": {
                        "initials": "KK",
                        "color": "#7d5d9e",
                        "image_urls": {
                            "mini": null,
                            "mini_x2": null,
                            "normal": null,
                            "normal_x2": null,
                            "large": null
                        },
                        "image_url": null
                    },
                    "user_time": {
                        "local_time": null,
                        "timezone": null,
                        "timezone_code": null,
                        "local_time_12h": null
                    },
                    "user_agent_data": {
                        "source": null,
                        "name": null,
                        "version": null,
                        "engine": null,
                        "engine_version": null,
                        "os": null,
                        "platform": null,
                        "mobile": "boolean"
                    },
                    "last_heard_from_at": null,
                    "last_contacted_at": null,
                    "last_request_at": null,
                    "last_request_at_ios": null,
                    "last_session_lasted": null,
                    "last_seen_ip": null,
                    "referral_url": null,
                    "session_count": null,
                    "session_count_ios": null,
                    "social_accounts": {},
                    "segment_ids": [
                        "5c60465aef96db00109429f6",
                        "5cee72af993ff0001032aa0d"
                    ],
                    "unsubscribed_from_emails": null,
                    "geoip_data": {
                        "city_name": null,
                        "continent_code": null,
                        "country_code2": null,
                        "country_code3": null,
                        "country_name": null,
                        "postal_code": null,
                        "region_code": null,
                        "region_name": null,
                        "timezone": null,
                        "latitude": null,
                        "longitude": null
                    },
                    "ios_app_name": null,
                    "ios_app_version": null,
                    "ios_device": null,
                    "ios_os_version": null,
                    "android_app_name": null,
                    "android_app_version": null,
                    "android_device": null,
                    "android_os_version": null,
                    "browser_locale": null,
                    "language_override": null,
                    "last_request_at_android": null,
                    "session_count_android": null,
                    "healthscore": null,
                    "last_visited_url": null,
                    "has_device_token": null,
                    "enabled_push_messaging": null,
                    "is_mobile_unidentified": null,
                    "marked_email_as_spam": null,
                    "has_hard_bounce": null,
                    "last_email_opened_at": null,
                    "last_email_clicked_at": null,
                    "utm_campaign": null,
                    "utm_content": null,
                    "utm_medium": null,
                    "utm_source": null,
                    "utm_term": null,
                    "created_at": "2019-10-18T15:43:47.726Z",
                    "updated_at": "2019-10-18T15:43:47.726Z",
                    "id": "5da9ddb3a4ce2d0010ad6f53",
                    "conversation_stats": {
                        "count": 76,
                        "count_opened": 76,
                        "count_close": 0
                    }
                },
                { // user 2
                    "app_id": "5c60465aef96db00109429f0",
                    "role": "user",
                    "custom_data": {},
                    "tag_ids": [
                        "5da9ddb2a4ce2d0010ad6f52"
                    ],
                    "email": "ktitorov@gmail.com",
                    "name": "Kostya",
                    "remote_created_at": "2019-01-03T12:50:00.000Z",
                    "user_event_summaries": {},
                    "user_id": null,
                    "acquired_at": null,
                    "company_ids": [
                        "5ddd668fd12b7f3820b1d281"
                    ],
                    "pseudonym": null,
                    "display_as": "Kostya",
                    "phone": null,
                    "avatar": {
                        "initials": "K",
                        "color": "#a2edb7",
                        "image_urls": {
                            "mini": null,
                            "mini_x2": null,
                            "normal": null,
                            "normal_x2": null,
                           "large": null
                        },
                        "image_url": null
                    },
                    "user_time": {
                        "local_time": null,
                        "timezone": null,
                        "timezone_code": null,
                        "local_time_12h": null
                    },
                    "user_agent_data": {
                        "source": null,
                        "name": null,
                        "version": null,
                        "engine": null,
                        "engine_version": null,
                        "os": null,
                        "platform": null,
                        "mobile": "boolean"
                    },
                    "last_heard_from_at": null,
                    "last_contacted_at": null,
                    "last_request_at": null,
                    "last_request_at_ios": null,
                    "last_session_lasted": null,
                    "last_seen_ip": null,
                    "referral_url": null,
                    "session_count": null,
                    "session_count_ios": null,
                    "social_accounts": {},
                    "segment_ids": [
                        "5c60465aef96db00109429f6",
                        "5cee72af993ff0001032aa0d"
                    ],
                    "unsubscribed_from_emails": null,
                    "geoip_data": {
                        "city_name": null,
                        "continent_code": null,
                        "country_code2": null,
                        "country_code3": null,
                        "country_name": null,
                        "postal_code": null,
                        "region_code": null,
                        "region_name": null,
                        "timezone": null,
                        "latitude": null,
                        "longitude": null
                    },
                    "ios_app_name": null,
                    "ios_app_version": null,
                    "ios_device": null,
                    "ios_os_version": null,
                    "android_app_name": null,
                    "android_app_version": null,
                    "android_device": null,
                    "android_os_version": null,
                    "browser_locale": null,
                    "language_override": null,
                    "last_request_at_android": null,
                    "session_count_android": null,
                    "healthscore": null,
                    "last_visited_url": null,
                    "has_device_token": null,
                    "enabled_push_messaging": null,
                    "is_mobile_unidentified": null,
                    "marked_email_as_spam": null,
                    "has_hard_bounce": null,
                    "last_email_opened_at": null,
                    "last_email_clicked_at": null,
                    "utm_campaign": null,
                    "utm_content": null,
                    "utm_medium": null,
                    "utm_source": null,
                    "utm_term": null,
                    "created_at": "2019-10-18T15:43:47.914Z",
                    "updated_at": "2019-10-18T15:43:47.914Z",
                    "id": "5da9ddb3a4ce2d0010ad6f56",
                    "conversation_stats": {
                        "count": 46,
                        "count_opened": 46,
                        "count_close": 0
                    }
                    // user 3 and so on
                }
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Search user [POST /user/search{?include_count,limit,skip,sort}]
You can search users, search criteria are predicates. 

+ Parameters

    + include_count: true (boolean, required)
    + limit: 25 (number, required)
    + skip: 0 (number, required)
    + sort: "last_request_at desc" (string, required)

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "predicates": [
                    {
                        "type": "string",
                        "attribute": "role",
                        "comparison": "eq",
                        "value": "user",
                        "operator": "and",
                        "hyper_type": "string",
                        "notDraggable": true,
                        "iconClass": "users",
                        "attributeTitle": "User Type",
                        "attributeDescription": "",
                        "id": "5aacfffc47e952210d5806ec"
                    },
                    {
                        "type": "string",
                        "id": "586c13daf0d5dbce55c009fe",
                        "attribute": "geoip_data.city_name",
                        "operator": "and",
                        "attributeTitle": "City",
                        "attributeDescription": "The city a person is in (or their IP address location)",
                        "iconClass": "users",
                        "hyper_type": "string",
                        "comparison": "eq",
                        "value": "Moscow"
                    }
                    // More predicates
                ]
            }

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "role": "user",
                "custom_data": {},
                "tag_ids": [
                    "5da9ddb2a4ce2d0010ad6f52"
                ],
                "email": "ktitorovk@gmail.com",
                "name": "K Kostya",
                "remote_created_at": "2019-01-03T12:50:00.000Z",
                "user_event_summaries": {},
                "user_id": null,
                "acquired_at": null,
                "company_ids": [
                    "5ddd668fd12b7f3820b1d281"
                ],
                "pseudonym": null,
                "display_as": "K Kostya",
                "phone": null,
                "avatar": {
                    "initials": "KK",
                    "color": "#7d5d9e",
                    "image_urls": {
                        "mini": null,
                        "mini_x2": null,
                        "normal": null,
                        "normal_x2": null,
                        "large": null
                    },
                    "image_url": null
                },
                "user_time": {
                    "local_time": null,
                    "timezone": null,
                    "timezone_code": null,
                    "local_time_12h": null
                },
                "user_agent_data": {
                    "source": null,
                    "name": null,
                    "version": null,
                    "engine": null,
                    "engine_version": null,
                    "os": null,
                    "platform": null,
                    "mobile": "boolean"
                },
                "last_heard_from_at": null,
                "last_contacted_at": null,
                "last_request_at": null,
                "last_request_at_ios": null,
                "last_session_lasted": null,
                "last_seen_ip": null,
                "referral_url": null,
                "session_count": null,
                "session_count_ios": null,
                "social_accounts": {},
                "segment_ids": [
                    "5c60465aef96db00109429f6",
                    "5cee72af993ff0001032aa0d"
                ],
                "unsubscribed_from_emails": null,
                "geoip_data": {
                    "city_name": null,
                    "continent_code": null,
                    "country_code2": null,
                    "country_code3": null,
                    "country_name": null,
                    "postal_code": null,
                    "region_code": null,
                    "region_name": null,
                    "timezone": null,
                    "latitude": null,
                    "longitude": null
                },
                "ios_app_name": null,
                "ios_app_version": null,
                "ios_device": null,
                "ios_os_version": null,
                "android_app_name": null,
                "android_app_version": null,
                "android_device": null,
                "android_os_version": null,
                "browser_locale": null,
                "language_override": null,
                "last_request_at_android": null,
                "session_count_android": null,
                "healthscore": null,
                "last_visited_url": null,
                "has_device_token": null,
                "enabled_push_messaging": null,
                "is_mobile_unidentified": null,
                "marked_email_as_spam": null,
                "has_hard_bounce": null,
                "last_email_opened_at": null,
                "last_email_clicked_at": null,
                "utm_campaign": null,
                "utm_content": null,
                "utm_medium": null,
                "utm_source": null,
                "utm_term": null,
                "created_at": "2019-10-18T15:43:47.726Z",
                "updated_at": "2019-10-18T15:43:47.726Z",
                "id": "5da9ddb3a4ce2d0010ad6f53"
            },
            {
                "app_id": "5c60465aef96db00109429f0",
                "role": "user",
                "custom_data": {},
                "tag_ids": [
                    "5da9ddb2a4ce2d0010ad6f52"
                ],
                "email": "ktitorov@gmail.com",
                "name": "Kostya",
                "remote_created_at": "2019-01-03T12:50:00.000Z",
                "user_event_summaries": {},
                "user_id": null,
                "acquired_at": null,
                "company_ids": [
                    "5ddd668fd12b7f3820b1d281"
                ],
                "pseudonym": null,
                "display_as": "Kostya",
                "phone": null,
                "avatar": {
                    "initials": "K",
                    "color": "#a2edb7",
                    "image_urls": {
                        "mini": null,
                        "mini_x2": null,
                        "normal": null,
                        "normal_x2": null,
                        "large": null
                    },
                    "image_url": null
                },
                "user_time": {
                    "local_time": null,
                    "timezone": null,
                    "timezone_code": null,
                    "local_time_12h": null
                },
                "user_agent_data": {
                    "source": null,
                    "name": null,
                    "version": null,
                    "engine": null,
                    "engine_version": null,
                    "os": null,
                    "platform": null,
                    "mobile": "boolean"
                },
                "last_heard_from_at": null,
                "last_contacted_at": null,
                "last_request_at": null,
                "last_request_at_ios": null,
                "last_session_lasted": null,
                "last_seen_ip": null,
                "referral_url": null,
                "session_count": null,
                "session_count_ios": null,
                "social_accounts": {},
                "segment_ids": [
                    "5c60465aef96db00109429f6",
                    "5cee72af993ff0001032aa0d"
                ],
                "unsubscribed_from_emails": null,
                "geoip_data": {
                    "city_name": null,
                    "continent_code": null,
                    "country_code2": null,
                    "country_code3": null,
                    "country_name": null,
                    "postal_code": null,
                    "region_code": null,
                    "region_name": null,
                    "timezone": null,
                    "latitude": null,
                    "longitude": null
                },
                "ios_app_name": null,
                "ios_app_version": null,
                "ios_device": null,
                "ios_os_version": null,
                "android_app_name": null,
                "android_app_version": null,
                "android_device": null,
                "android_os_version": null,
                "browser_locale": null,
                "language_override": null,
                "last_request_at_android": null,
                "session_count_android": null,
                "healthscore": null,
                "last_visited_url": null,
                "has_device_token": null,
                "enabled_push_messaging": null,
                "is_mobile_unidentified": null,
                "marked_email_as_spam": null,
                "has_hard_bounce": null,
                "last_email_opened_at": null,
                "last_email_clicked_at": null,
                "utm_campaign": null,
                "utm_content": null,
                "utm_medium": null,
                "utm_source": null,
                "utm_term": null,
                "created_at": "2019-10-18T15:43:47.914Z",
                "updated_at": "2019-10-18T15:43:47.914Z",
                "id": "5da9ddb3a4ce2d0010ad6f56"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Update user  [PUT /user/{id}]
You can update an user using user object attributes. 

+ Parameters 

    + id (string) - user id

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "app_id": "5d7420cd9283e20020eb7ec6",
                "remote_created_at": "2020-03-08T17:48:07.317Z",
                "role": "user",
                "custom_data": {
                    "custom_field_1": "asfasdf",
                    "hobby": "collecting",
                    "custom_field_N": "dggidlsfgsdg"
                },
                "email": "ed.galstyan01@gmail.com",
                "user_id": "c46072c8f6e3168ed68928a8d8a4f8da",
                "acquired_at": null,
                "company_ids": [],
                "name": null,
                "owner_name": null,
                "pseudonym": null,
                "display_as": "ed.galstyan01@gmail.com",
                "phone": "jhbkjhb6123491234",
                "user_agent_data": {
                    "source": "Mozilla/5.0",
                    "name": "Chrome",
                    "version": "80.0.3987.132",
                    "engine": null,
                    "engine_version": null,
                    "os": "Windows 10",
                    "platform": "Windows",
                    "mobile": false
                },
                "last_heard_from_at": "2020-03-08T17:49:21.578Z",
                "last_contacted_at": "2020-03-09T09:44:36.388Z",
                "last_request_at": "2020-03-08T18:37:58.922Z",
                "last_request_at_ios": null,
                "last_session_lasted": 0,
                "last_seen_ip": "::ffff:37.252.92.184",
                "referral_url": null,
                "session_count": 4,
                "session_count_ios": null,
                "social_accounts": {},
                "tag_ids": [],
                "segment_ids": [
                    "5d7420cd9283e20020eb7ed0", 
                    "5d7420cd9283e20020eb7ed4"
                ],
                "unsubscribed_from_emails": null,
                "ios_app_name": null,
                "ios_app_version": null,
                "ios_device": null,
                "ios_os_version": null,
                "android_app_name": null,
                "android_app_version": null,
                "android_device": null,
                "android_os_version": null,
                "browser_locale": "en-US",
                "language_override": null,
                "last_request_at_android": null,
                "session_count_android": null,
                "user_event_summaries": {
                    "eventName": {
                        "first": "2020-03-08T17:48:55.793Z",
                        "last": "2020-03-08T17:48:55.793Z",
                        "count": 1,
                        "description": null
                    }
                },
                "healthscore": null,
                "last_visited_url": "http://camazonaws.com/widget/example.html?email=ed.galstyan01@gmail.com",
                "has_device_token": null,
                "enabled_push_messaging": null,
                "is_mobile_unidentified": null,
                "marked_email_as_spam": null,
                "has_hard_bounce": null,
                "last_email_opened_at": null,
                "last_email_clicked_at": null,
                "utm_campaign": null,
                "utm_content": null,
                "utm_medium": null,
                "utm_source": null,
                "utm_term": null,
                "geoip_data": {
                    "city_name": "Vanadzor",
                    "continent_code": "0",
                    "country_code": "AM",
                    "country_name": "AM",
                    "postal_code": null,
                    "region_code": null,
                    "region_name": "AS",
                    "timezone": "Asia/Yerevan",
                    "latitude": 40.8046,
                    "longitude": 44.4939
                },
                "avatar": {
                    "initials": null,
                    "color": "#a2edb7",
                    "image_urls": {
                        "mini": null,
                        "mini_x2": null,
                        "normal": null,
                        "normal_x2": null,
                        "large": null
                    },
                    "image_url": null
                },
                "user_time": {
                    "local_time": null,
                    "timezone": null,
                    "timezone_code": null,
                    "local_time_12h": null
                },
                "created_at": "2020-03-08T17:48:07.343Z",
                "updated_at": "2020-03-09T09:44:36.389Z",
                "id": "5e652fd7fd35e700111c877c",
                "url_visits": [
                    {
                        "page_url": "http://amazonaws.com/widget/example.html?email=ed.galstyan01@gmail.com",
                        "count": 5,
                        "first_visit_at": "2020-03-08T17:48:07.391Z",
                        "last_visit_at": "2020-03-08T17:48:29.061Z",
                        "id": "5e652fd7fd35e700111c8780"
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "app_id": "5d7420cd9283e20020eb7ec6",
            "owner_id": null,
            "remote_created_at": "2020-03-08T17:48:07.317Z",
            "role": "user",
            "custom_data": {
                "custom_field_1": "asfasdf",
                "hobby": "collecting",
                "custom_field_N": "dggidlsfgsdg"
            },
            "email": "ed.galstyan01@gmail.com",
            "user_id": "c46072c8f6e3168ed68928a8d8a4f8da",
            "acquired_at": null,
            "company_ids": [],
            "name": null,
            "owner_name": null,
            "pseudonym": null,
            "display_as": "ed.galstyan01@gmail.com",
            "phone": "jhbkjhb6123491234",
            "user_agent_data": {
                "source": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36",
                "name": "Chrome",
                "version": "80.0.3987.132",
                "engine": null,
                "engine_version": null,
                "os": "Windows 10",
                "platform": "Windows",
                "mobile": false
            },
            "last_heard_from_at": "2020-03-08T17:49:21.578Z",
            "last_contacted_at": "2020-03-09T09:44:36.388Z",
            "last_request_at": "2020-03-08T18:37:58.922Z",
            "last_request_at_ios": null,
            "last_session_lasted": 0,
            "last_seen_ip": "::ffff:37.252.92.184",
            "referral_url": null,
            "session_count": 4,
            "session_count_ios": null,
            "social_accounts": {},
            "tag_ids": [],
            "segment_ids": [
                "5d7420cd9283e20020eb7ed0",
                "5d7420cd9283e20020eb7ed4"
            ],
            "unsubscribed_from_emails": null,
            "ios_app_name": null,
            "ios_app_version": null,
            "ios_device": null,
            "ios_os_version": null,
            "android_app_name": null,
            "android_app_version": null,
            "android_device": null,
            "android_os_version": null,
            "browser_locale": "en-US",
            "language_override": null,
            "last_request_at_android": null,
            "session_count_android": null,
            "user_event_summaries": {
                "eventName": {
                    "first": "2020-03-08T17:48:55.793Z",
                    "last": "2020-03-08T17:48:55.793Z",
                    "count": 1,
                    "description": null
                }
            },
            "healthscore": null,
            "last_visited_url": "http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/example.html?email=ed.galstyan01@gmail.com",
            "has_device_token": null,
            "enabled_push_messaging": null,
            "is_mobile_unidentified": null,
            "marked_email_as_spam": null,
            "has_hard_bounce": null,
            "last_email_opened_at": null,
            "last_email_clicked_at": null,
            "utm_campaign": null,
            "utm_content": null,
            "utm_medium": null,
            "utm_source": null,
            "utm_term": null,
            "geoip_data": {
                "city_name": "Vanadzor",
                "continent_code": "0",
                "country_code": "AM",
                "country_name": "AM",
                "postal_code": null,
                "region_code": null,
                "region_name": "AS",
                "timezone": "Asia/Yerevan",
                "latitude": 40.8046,
                "longitude": 44.4939
            },
            "avatar": {
                "initials": null,
                "color": "#a2edb7",
                "image_urls": {
                    "mini": null,
                    "mini_x2": null,
                    "normal": null,
                    "normal_x2": null,
                    "large": null
                },
                "image_url": null
            },
            "user_time": {
                "local_time": null,
                "timezone": null,
                "timezone_code": null,
                "local_time_12h": null
            },
            "created_at": "2020-03-08T17:48:07.343Z",
            "updated_at": "2020-03-13T14:07:12.015Z",
            "id": "5e652fd7fd35e700111c877c"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "User/Visitor not found",
            "error_type": "not_found"
        }

## Update user name [PUT /user/{id}/update_name]
You can change user name.

+ Parameters

    + id (string) - user id

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "new_name": "new name" 
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "missing new_name field from body",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not Found",
            "error_type": "not_found"
        }

## Add tag user  [PUT /user/{id}/add_tag]
You can add tag to an user.

+ Parameters 

    + id (string, optional) - user ID

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"

    + Body 

            {
                "tag": "tag id"
            }

+ Response 200 (application/json)

        {
            "n": 1,
            "nModified": 1,
            "opTime": {
                "ts": "6804844745244803073",
                "t": 33
            },
            "electionId": "7fffffff0000000000000021",
            "ok": 1,
            "$clusterTime": {
                "clusterTime": "6804844745244803073",
                "signature": {
                    "hash": "AsHiIGDYXl27RwwG6/0tSU6UBkA=",
                    "keyId": "6759628484898717698"
                }
            },
            "operationTime": "6804844745244803073"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Update user tags  [POST /user/update_tags]
You can change tags of user.

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "id": "569d36d20691ee79dd000591",
                "tag_ids": [
                            "569d36d20691ee79dd000591",
                            "569d36d20691ee79dd000592"
                           ]
            }

+ Response 200 (application/json)

    + Body 

            {
                "role": "user",
                "app_id": "5c60465aef96db00109429f0",
                "custom_data": {},
                "tag_ids": [
                    "5d1228d88100ad001072e3ea",
                    "5da9ddb2a4ce2d0010ad6f52"
                ],
                "email": "ktitorovk@gmail.com",
                "name": "new name",
                "remote_created_at": "2019-01-03T12:50:00.000Z",
                "user_event_summaries": {},
                "user_id": null,
                "acquired_at": null,
                "company_ids": [
                    "5ddd668fd12b7f3820b1d281"
                ],
                "pseudonym": null,
                "display_as": "new name",
                "phone": null,
                "avatar": {
                    "initials": "KK",
                    "color": "#7d5d9e",
                    "image_urls": {
                        "mini": null,
                        "mini_x2": null,
                        "normal": null,
                        "normal_x2": null,
                        "large": null
                    },
                    "image_url": null
                },
                "user_time": {
                    "local_time": null,
                    "timezone": null,
                    "timezone_code": null,
                    "local_time_12h": null
                },
                "user_agent_data": {
                    "source": null,
                    "name": null,
                    "version": null,
                    "engine": null,
                    "engine_version": null,
                    "os": null,
                    "platform": null,
                    "mobile": "boolean"
                },
                "last_heard_from_at": null,
                "last_contacted_at": null,
                "last_request_at": null,
                "last_request_at_ios": null,
                "last_session_lasted": null,
                "last_seen_ip": null,
                "referral_url": null,
                "session_count": null,
                "session_count_ios": null,
                "social_accounts": {},
                "segment_ids": [
                    "5c60465aef96db00109429f6",
                    "5cee72af993ff0001032aa0d"
                ],
                "unsubscribed_from_emails": null,
                "geoip_data": {
                    "city_name": null,
                    "continent_code": null,
                    "country_code2": null,
                    "country_code3": null,
                    "country_name": null,
                    "postal_code": null,
                    "region_code": null,
                    "region_name": null,
                    "timezone": null,
                    "latitude": null,
                    "longitude": null
                },
                "ios_app_name": null,
                "ios_app_version": null,
                "ios_device": null,
                "ios_os_version": null,
                "android_app_name": null,
                "android_app_version": null,
                "android_device": null,
                "android_os_version": null,
                "browser_locale": null,
                "language_override": null,
                "last_request_at_android": null,
                "session_count_android": null,
                "healthscore": null,
                "last_visited_url": null,
                "has_device_token": null,
                "enabled_push_messaging": null,
                "is_mobile_unidentified": null,
                "marked_email_as_spam": null,
                "has_hard_bounce": null,
                "last_email_opened_at": null,
                "last_email_clicked_at": null,
                "utm_campaign": null,
                "utm_content": null,
                "utm_medium": null,
                "utm_source": null,
                "utm_term": null,
                "created_at": "2019-10-18T15:43:47.726Z",
                "updated_at": "2020-03-17T07:55:04.401Z",
                "id": "5da9ddb3a4ce2d0010ad6f53"
            }

+ Response 400 (application/json)

        {
            "raw_message": "tag_ids should be an array",
            "attr": "tag_ids",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## User bulk tag [POST /user/bulk_tag]
You can add a tag for users which are fitted for search criteria in predicates or are fitted for user id's in included_ids.
*predicates* are used if *included_ids* is empty.  

+ Request (application/json)

    + Attributes
        + tag_name (string, required) - Name of the tag
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of updating users

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "tag_name": "Test tag",
                "predicates": [],
                "included_ids": [
                    "569d36d20691ee79dd000591",
                    "569d36d20691ee79dd000592"
                ]
            }

+ Response 200 (application/json)

    + Attributes
        + name (string) - Name of the tag
        + app_id (string) - Current app id
        + created_at (string) - Date of the tag creation
        + id (string) - Tag ID

    + Body

            {
                "name": "123",
                "app_id": "5c60465aef96db00109429f0",
                "created_at": "2020-03-12T15:50:41.248Z",
                "id": "5e6a5a5182a68800115c782b"
            }

+ Response 400 (application/json)

        {
            "attr": "tag_name",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## User bulk tags [POST /user/bulk_tags]
Yo can add or delete tags from users which are fitted for search criteria in predicates or are fitted for user id's in included_ids.
*predicates* are used if *included_ids* is empty.

+ Request (application/json)

    + Attributes
        + action (string, required) - "add" for adding tags, "delete" for deleting tags from users
        + tag_ids (array, required) - List of tags ID
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of updating users
        
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "action": "add", 
                "tag_ids": ["tag1_id", "tag2_id"],
                "predicates": [],
                "included_ids": [
                                "569d36d20691ee79dd000591",
                                "569d36d20691ee79dd000592"
                                ]
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found users",
            "error_type": "not_found"
        }

## User bulk message [POST /user/bulk_message]
You can send manual message to selected users which id's are in included_ids.
The message will be visible in the manual message list.

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "user1_id",
                    ...,
                    "userN_id"
                ],
                "blocks": [
                    {
                        "type": "paragraph",
                        "text": "hello"
                    }
                ],
                "subject": null,
                "type": "in-app",
                "message_style": "chat",
                "delivery_option": "full",
                "email_style": null
            }

+ Response 200 (application/json)

    + Body 

            {
                "status": "ok"
            }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Destroy user [PUT /user/{id}/destroy]
You can delete user from application. Allowed for Admins with permission **can_delete_users**.

+ Parameters 

    + id (string, optional) - user ID

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Forbidden",
            "raw_message": "forbidden",
            "error_type": "forbidden"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found user",
            "error_type": "not_found"
        }

## Bulk delete users [POST /user/bulk_delete]
You can delete users from application. Allowed for Admins with permission **can_delete_users**.

+ Request (application/json)

    + Attributes
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of deleting users   
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "user1_id", 
                    "userN_id"
                ],
                "predicates": []
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates or included_ids should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Unsubscribe user [PUT /user/{id}/unsubscribe]
You can unsubscribe user from mailing.

+ Parameters 

    + id (string, optional) - user ID

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Id should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found user",
            "error_type": "not_found"
        }

## Resubscribe user [PUT /user/{id}/resubscribe]
You can resubcribe user on mailing.

+ Parameters 

    + id (string, optional) - user ID

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Id should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found user",
            "error_type": "not_found"
        }

## Bulk unsubscribe users [POST /user/bulk_unsubscribe]
You can unsubscribe users from mailing. 

+ Request (application/json)

    + Attributes
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of unsubscribing users   
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "user1_id", 
                    "userN_id"
                ],
                "predicates": []
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates or included_ids should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Bulk resubcribe users [POST /user/bulk_resubscribe]
You can resubscribe users on mailing.

+ Request (application/json)

    + Attributes
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of unsubscribing users   
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "user1_id", 
                    "userN_id"
                ],
                "predicates": []
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates or included_ids should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Block user [PUT /user/{id}/block]
You can block user.

+ Parameters 

    + id (string, optional) - user ID

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Bulk block users [POST /user/bulk_block]
You can block users.

+ Request (application/json)

    + Attributes
        + predicates (array) - List of search criteria for users, using if INCLUDED_IDS is empty
        + included_ids (array) - List IDs of unsubscribing users   
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "user1_id", 
                    "userN_id"
                ],
                "predicates": []
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates or included_ids should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Export user info [GET /user/{id}/export_info]
Job with type - **export_user_info** for an user creating

+ Parameters

    + id (string, optional) - User ID

+ Request (application/json)

    + Headers

            x-Token: valid_access_token
    
    + Body
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Id should be required",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found user",
            "error_type": "not_found"
        }

## Get online users [GET /user/online_users]
You can find online user at the current moment

+ Request (application/json)

    + Headers

            x-Token: valid_access_token
    
    + Body
    
            {}

+ Response 200 (application/json)
    
        {}

## Get admins of app [GET /user/get_app_admins]
You can get list of admins of current application.

+ Request (application/json)

    + Headers

            x-Token: valid_access_token
    
    + Body
    
            {}

+ Response 200 (application/json)
    
        {}

# User events [/userevent]

## User events object
|Atrribute|Type|Description|
|:--------|----|-----------|
|app_id|App object|Link for application. Application ID.|
|name|string||
|description|string||
|selector|string||
|dom_event|string||
|is_active|boolean||
|archived_at|datetime||
|delete_archived_events_after_some_time|boolean||

## List user events [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "56be64e1d18189818efd226",
                "name": "Bought Gold Plan",
                "description": "User who bought the Gold plan 123",
                "is_active": true,
                "archived_at": null,
                "delete_archived_events_after_some_time": false,
                "created_at": "2019-03-28T15:33:38.764Z",
                "id": "5c9ce95258e6c600106295a1"
            },
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Companies [/company]
Companies are organizations using our Application. Company will have its own description and be associated with users.

## Company object
|Atrribute|Type|Description|
|:--------|----|-----------|
|app_id|App object|Link for application. Application ID.|
|name|string|Company name|
|name_downcased|string|Company name in lowercase letters|
|remote_company_id|string|Remote Company identificator|
|remote_company_id_downcased|string|Remote Company identificator in lowercase letters|
|custom_data|json|Custom Company attributes|
|last_request_at|datetime||
|monthly_spend|number||
|plan_id|string||
|remote_created_at|datetime||
|session_count|integer||
|tag_ids|array||
|user_count|integer||
|segment_ids|array||
|note_ids|array||
|taggings|array||
|user_event_summaries|array||

## Create company [POST]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "name": "Name company"
            }

+ Response 201 (application/json)

        {
            "name": "Name company",
            "app_id": "5c60465aef96db00109429f0",
            "session_count": 0,
            "user_count": 0,
            "remote_created_at": "2020-03-11T15:04:20.595Z",
            "remote_company_id": null,
            "custom_data": {},
            "last_request_at": null,
            "monthly_spend": null,
            "plan_id": null,
            "tag_ids": [],
            "segment_ids": [
                "5c60465aef96db00109429f9"
            ],
            "note_ids": [],
            "created_at": "2020-03-11T15:04:20.658Z",
            "updated_at": "2020-03-11T15:04:20.658Z",
            "id": "569d36d20691ee79dd000591"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## List all companies [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "name": "Name company",
                "session_count": 0,
                "user_count": 0,
                "remote_created_at": "2020-03-11T15:04:20.595Z",
                "remote_company_id": null,
                "custom_data": {},
                "last_request_at": null,
                "monthly_spend": null,
                "plan_id": null,
                "tag_ids": [],
                "segment_ids": [
                    "5c60465aef96db00109429f9"
                ],
                "note_ids": [],
                "created_at": "2020-03-11T15:04:20.658Z",
                "updated_at": "2020-03-11T15:04:20.658Z",
                "id": "569d36d20691ee79dd000591"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Search company [POST /company/search{?include_count,limit,skip,sort}]

+ Parameters

    + include_count: true (boolean, required)
    + limit: 25 (number, required)
    + skip: 0 (number, required)
    + sort: "last_request_at desc" (string, required)

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "predicates": [
                    {
                        "type": "date",
                        "attribute": "remote_created_at",
                        "comparison": "gt",
                        "value": 1,
                        "operator": "and",
                        "hyper_type": "date",
                        "iconClass": "bell",
                        "attributeTitle": "Signed up",
                        "attributeDescription": "The time a person first signed up for your product",
                        "id": "586c13daf0d5dbce55c009f7"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body 

            [
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "name": "Name company",
                    "session_count": 0,
                    "user_count": 0,
                    "remote_created_at": "2020-03-11T15:04:20.595Z",
                    "remote_company_id": null,
                    "custom_data": {},
                    "last_request_at": null,
                    "monthly_spend": null,
                    "plan_id": null,
                    "tag_ids": [],
                    "segment_ids": [
                        "5c60465aef96db00109429f9"
                    ],
                    "note_ids": [],
                    "created_at": "2020-03-11T15:04:20.658Z",
                    "updated_at": "2020-03-11T15:04:20.658Z",
                    "id": "5e68fdf4bfe61a00114a8e88"
                }
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Add company tag [PUT /company/{id}/add_tag]

+ Parameters

    + id (string, required) - Company id

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body

            {
                "tag": "tag_id"
            }

+ Response 200 (application/json)

        {
            "n": 0,
            "nModified": 0,
            "opTime": {
                "ts": "6804839213326925826",
                "t": 33
            },
            "electionId": "7fffffff0000000000000021",
            "ok": 1,
            "$clusterTime": {
                "clusterTime": "6804839213326925826",
                "signature": {
                    "hash": "ibUX5EusNDq3Dgw5GjdGEcen2Hs=",
                    "keyId": "6759628484898717698"
                }
            },
            "operationTime": "6804839213326925826"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Update company tags [POST /company/update_tags]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "id": "569d36d20691ee79dd000591",
                "tag_ids": [
                    "569d36d20691ee79dd000591",
                    "569d36d20691ee79dd000592"
                ]
            }

+ Response 200 (application/json)

        {
            "name": "Name company",
            "app_id": "5c60465aef96db00109429f0",
            "session_count": 0,
            "user_count": 0,
            "remote_created_at": "2020-03-11T15:04:20.595Z",
            "remote_company_id": {},
            "custom_data": {},
            "last_request_at": {},
            "monthly_spend": {},
            "plan_id": {},
            "tag_ids": [
                "569d36d20691ee79dd000591",
                "569d36d20691ee79dd000592"
            ],
            "segment_ids": [
                "5c60465aef96db00109429f9"
            ],
            "note_ids": [],
            "created_at": "2020-03-11T15:04:20.658Z",
            "updated_at": "2020-03-12T13:15:37.862Z",
            "id": "569d36d20691ee79dd000591"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Company bulk tag [POST /company/bulk_tag]

+ Request (application/json)

    + Attributes
        + tag_name (string, required) - Name of the tag
        + predicates (array) - Search criteria for companies.
        + included_ids (array) - List ID's of companies for updating. If EMPTY then working PREDICATES attribute. 
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "tag_name": "Test tag",
                "predicates": [
                    {
                        "type": "date",
                        "attribute": "remote_created_at",
                        "comparison": "gt",
                        "value": 1,
                        "operator": "and",
                        "hyper_type": "date",
                        "iconClass": "bell",
                        "attributeTitle": "Signed up",
                        "attributeDescription": "The time a person first signed up for your product",
                        "id": "586c13daf0d5dbce55c009f7"
                    }
                ],
                "included_ids": [
                    "569d36d20691ee79dd000591",
                    "569d36d20691ee79dd000592"
                ]
            }

+ Response 200 (application/json)

        {
            "name": "new_",
            "app_id": "5c60465aef96db00109429f0",
            "created_by_id": "5c60465aef96db00109429ef",
            "created_at": "2020-03-12T13:12:12.711Z",
            "id": "5e6a352cbfe61a00114a9a6c"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not found company",
            // OR Predicates required
            "error_type": "invalid_request"       
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Company bulk tags [POST /company/bulk_tags]

+ Request (application/json)

    + Attributes
        + tag_ids (array) - List ID's of tags
        + predicates (array) - Search criteria for companies.
        + included_ids (array) - List ID's of companies for updating. If EMPTY then working PREDICATES attribute. 

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "tag_ids": [
                    "tag1_id",
                    "tag2_id"
                ],
                "predicates": [
                    {
                        "type": "date",
                        "attribute": "remote_created_at",
                        "comparison": "gt",
                        "value": 1,
                        "operator": "and",
                        "hyper_type": "date",
                        "iconClass": "bell",
                        "attributeTitle": "Signed up",
                        "attributeDescription": "The time a person first signed up for your product",
                        "id": "586c13daf0d5dbce55c009f7"
                    }
                ],
                "included_ids": [
                    "569d36d20691ee79dd000591",
                    "569d36d20691ee79dd000592"
                ]
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates required",
            "attribute": "predicates",
            "error_type": "invalid_request"       
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found companies",
            "error_type": "not_found"
        }

## Company bulk delete [POST /company/bulk_delete]

+ Request (application/json)

    + Attributes
        + included_ids (array) - List ID's of companies for updating. If EMPTY then working PREDICATES attribute. 
        + predicates (array) - Search criteria for companies.

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "included_ids": [
                    "companyId1", 
                    "companyIdN"
                ],
                "predicates": [
                    {
                        "type": "date",
                        "attribute": "remote_created_at",
                        "comparison": "gt",
                        "value": 1,
                        "operator": "and",
                        "hyper_type": "date",
                        "iconClass": "bell",
                        "attributeTitle": "Signed up",
                        "attributeDescription": "The time a person first signed up for your product",
                        "id": "586c13daf0d5dbce55c009f7"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body 

            {
                "status": "ok"
            }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Predicates required",
            "attribute": "predicates",
            "error_type": "invalid_request"       
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found companies",
            "error_type": "not_found"
        }

# Signup Flow [/]
In order to start working with Captivate API, please create new account or login.
Please use *Signin and create app* method if you want to create a new Admin account and register a new Application. If the Application you want to join is already exist in Captivate, plase use *Sign in and join app*. 
In order to authorize as an existing user please use either login with email/password or login via google account.

## Login with email/password [POST /login]

+ Request (application/json)

    + Attributes
         + email (string, required)
         + password (string, required)
         + remember_me (boolean)

    + Body

            {
                "email": "some@gmail.com",
                "password": "some password",
                "remember_me": true
            }

+ Response 200 (application/json)

        {
            "access_token": "...",
            "app_ids": [
                "...",
                "...",
                "..."
            ],
            "current_app_id": "..."
        }
            
+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Email or Password is incorrect",
            "error_type": "invalid_request"
        }

## Login via google account [GET /auth/google]
If you have google account connected with Captivate account, plase use *Login via google account*. System will redirect you to google authentication page in order to authorize you in Captivate. 

+ Request (application/json)
    
        {}
    
+ Response 200 

## Forgot password [POST /forgot_password]

In order to restore your password, please specify your email in *Forgot password" endpoint. Check your email after the request. 

+ Request (application/json)

        {
            "email": "some@gmail.com"
        }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Email or Password is incorrect",
            "error_type": "invalid_request" 
        }

+ Response 500 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "External service error sending email",
            "error_type": "invalid_request"  
        }

## Reset password [POST /reset_password/{token}]

Using *Reset password* endpoint you can change your password. Please, specify existing password and new one. 

+ Parameters 

    + token (string) - invite token

+ Request (application/json)

        {
            "password": "new password"
        }

+ Response 200 (application/json)

        {
            "status": "ok",
            "access_token": "token_code",
            "admin_id": "admin_id"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Token not found",
            "error_type": "not_found"
        }

## Signup and create app [POST /signup_and_create_app]

+ Request (application/json)

    + Attributes
        + terms_of_service (boolean, required) - User must accept Captivate terms of service. If true: ok.
        + admin
            + name (string, required) - Admin name.
            + email (string, required) - Admin email adress. Will be used for further authorization.
            + password (string, required) - Admin password. Will be used for further authorization.
            + phone (string) - Admin phone number.
            + role (string) - Admin role.
        + app
            + name (string, required) - Client application name.
            + url (string, required) - Client application URL.
        + messanger_settings
            + default_locate (string, required) - Set "en" for English.
            + supported_locates (array) - An array of locales settings. 
                
                For each locale the following parameters should be specified: "locale_id", "name", "user_welcome_message", "visitor_welcome_message", "is_permitted". 
                For more information look into request sample.
        + appearance_settings
            + base_color (string, required) - Hex Color Code for base theme.

    + Body 

            {
                "terms_of_service": true,
                "admin": {
                    "name": "Test",
                    "email": "some@gmail.com",
                    "password": "test123!",
                    "phone": "",
                    "role": "Design"
                },
                "app": {
                    "name": "MyComp",
                    "url": "www.example.com"
                },
                "messanger_settings": {
                    "default_locale": "en",
                    "supported_locales": [
                        {
                            "locale_id": "en",
                            "name": "English",
                            "user_welcome_message": "Ask us anything, or share your feedback.",
                            "visitor_welcome_message": "Have a question? Chat with us",
                            "is_permitted": true
                        }
                    ]
                },
                "appearance_settings": {
                    "base_color": "#0071b2"
                }
            }

+ Response 200 (application/json)

    + Attributes
        + access_token (string)
        + admin_id (string) - ID of created Admin.
        + app_id (string) - ID of created Application.

    + Body

            {
                "status": "ok",
                "access_token": "...",
                "admin_id": "...",
                "app_id": "..."
            }

## Signup and join app [POST /signup_and_join_to_app/{token}]

+ Parameters 

    + token (string) - invite token

+ Request (application/json)

     + Attributes
        + terms_of_service (boolean, required) - User must accept Captivate terms of service. If true: ok.
        + admin
            + name (string, required) - Admin name.
            + email (string, required) - Admin email address. Will be used for further authorization.
            + password (string, required) - Admin password. Will be used for further authorization.
            + phone (string) - Admin phone number.
            + role (string) - Admin role.

    + Body

            {
                "terms_of_service": true,
                "admin": {
                    "name": "Test",
                    "email": "some@gmail.com",
                    "password": "test123!",
                    "phone": "",
                    "role": "Design"
                }
            }


+ Response 200 (application/json)

    + Attributes
        + access_token (string)
        + admin_id (string) - ID of created Admin.

    + Body

            {
                "status": "ok",
                "access_token": "...",
                "admin_id": "...",
            }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Email has already been taken",
            "error_type": "invalid_request"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "not found token",
            "error_type": "not_found"
        }

## Join an app [POST /join_to_app/{token}]

+ Parameters 

    + token (string) - invite token

+ Request (application/json)
    
        {}

+ Response 200 (application/json)

        {
            "status": "ok",
            "app_id": "...",
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "not found token",
            "error_type": "not_found"
        }

## Check email [POST /check_email]
Check if specific email is registered in Captivate (has an account). 
This endpoint is public, so using token is not required. 

+ Request (application/json)

    + Attributes
        + email: "some@gmail.com" (string, required)  

    + Body

            {
                "email": "some@gmail.com"
            }

+ Response 200 (application/json)

    + Attributes
        + exists (boolean) - For registred email - TRUE, another - FALSE 

    + Body

            {
                "exists": true
            }

+ Response 400 (application/json)    

        {
            "message": "Invalid request",
            "raw_message": "Email should be correct",
            "error_type": "invalid_request"     
        }

# Invites collection [/invite]
Endpoints for process of inviting new teammates

## Create invite [POST]
    
+ Request (application/json)

    + Attributes
        + email (string) - Email address of invite member.
        + description (string) - Description of type of access.
        + role (string) - Two kind of access: full_access or restricted_access.
        + can_access_settings_and_billing (boolean)
        + can_export_data (boolean)
        + can_send_messages (boolean)
    
    + Headers

            x-Token: valid_access_token

    + Body 

            {
                "email": "invite1@gmail.com",
                "descripiton": "Full Access",
                "role": "full_access",
                "can_access_settings_and_billing": true,
                "can_export_data": true,
                "can_send_messages": true
            }

+ Response 200 (application/json)

        {
            "email": "invite1@gmail.com",
            "description": "Full Access",
            "role": "full_access",
            "can_export_data": true,
            "can_send_messages": true,
            "can_delete_users": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_access_settings_and_billing": true,
            "active": true,
            "invite_token": "e99dd5aecc113a94fe48bf4ba32edbb57e5de7c97fd8b82436e76610a085fc46"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "email conflict",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Edit invite [PUT /invite/{token}]

+ Parameters 

    + token (string) - Invite token

+ Request (application/json)

    + Headers

            x-Token: valid_access_token

    + Body

            {
                "role": "restricted_access",
                "description": "Restricted Access",
                "can_send_messages": true,
                "can_export_data": true,
                "can_delete_messages": true,
                "can_delete_users": true,
                "can_reassign_conversations": true,
                "can_access_settings_and_billing": false
            }

+ Response 200 (application/json)

        {
            "email": "invite1@gmail.com",
            "description": "Restricted Access",
            "role": "restricted_access",
            "can_export_data": true,
            "can_send_messages": true,
            "can_delete_users": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_access_settings_and_billing": false,
            "active": true,
            "invite_token": "893882d05eb0e4b5c40bc3c12a0780becc41b017dbaec6855a1af833f3ea862c"
        }

+ Response 401 (application/json)    

        {
            "message": "Unauthorized"
        }

## Re-send invite [POST /invite/{token}/resend]

+ Parameters 

    + token (string) - invite token

+ Request (application/json)

    + Headers

            x-Token: valid_access_token

    + Body
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "not found token",
            "error_type": "not_found"
        }

## Get invite info [GET /invite/{token}]

+ Parameters 

    + token (string) - invite token

+ Request (application/json)

    + Headers
        
            x-Token: valid_access_token

    + Body
    
            {}

+ Response 200 (application/json)

    + Body 

            {
                "token": "invite token",
                "app_name": "App Name",
                "sender_name": "John",
                "sender_email": "john@gmail.com",
                "sender_avatar": "http://...",
                "authorized_sign_in_methods": ["email_password", "email_password_otp", "google_oauth2"],
                "active": true,
                "created_at": null,
                "is_email_invite": true,
                "email": "invite1@gmail.com",
                "teammates": [],
                "has_account": false
            }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "not found token",
            "error_type": "not_found"        
        }

## Get invites list [GET]

+ Request (application/json)

    + Headers
        
            x-Token: valid_access_token

    + Body
    
            {}

+ Response 200 (application/json)

        [
            {
                "token": "invite token",
                "app_name": "App Name",
                "sender_name": "John",
                "sender_email": "john@gmail.com",
                "sender_avatar": "http://...",
                "authorized_sign_in_methods": ["email_password", "email_password_otp", "google_oauth2"],
                "active": true,
                "created_at": null,
                "is_email_invite": true,
                "email": "invite1@gmail.com",
                "teammates": [],
                "has_account": false
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not found",
            "error_type": "not_found"
        }

## Delete invite [DELETE /invite/{token}]

+ Parameters

    + token (string) - invite token

+ Request

    + Headers
        
            x-Token: valid_access_token

    + Body
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "not found token",
            "error_type": "not_found"        
        }

# Pemissions collection [/permission]
Endpoints for updating or removing specified admin's permissions.

Note: Operation allowed only for admins, who has true value for "can_access_settings_and_billing" field.
Otherwise response would be 403 Forbidden.

## Edit permission [PUT /permission/{id}]

+ Parameters 

    + id (string) - Admin id
    
+ Request (application/json)
    
    + Headers  
    
            x-Token: valid_access_token

    + Body

            {
                "role": "full_access",
                "description": "Full Access",
                "can_export_data": true,
                "can_send_messages": true,
                "can_reassign_conversations": true,
                "can_delete_messages": true,
                "can_delete_users": true
            }
    
+ Response 200 (application/json) 

    + Body

            {
                "active": true,
                "can_send_messages": true,
                "can_export_data": true,
                "can_reassign_conversations": true,
                "can_delete_messages": true,
                "can_delete_users": true,
                "can_access_settings_and_billing": false,
                "role": "restricted_access",
                "description": "Restricted Access",
                "descriptions": ["Restricted Access"]
            }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Permissions not found",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Delete permission [DELETE /permission/{id}]
Remove specified admin from current app.

+ Parameters 

    + id (string) - Admin id
    

+ Request (application/json)

    + Attributes
        + reassign_auto_messages_admin_id (string, required) - Admin's id, who will be reassigned automessages.
        + reassign_replies_admin_id (string, required) - Admin's id, who will be reassigned replies.
    
    + Headers  
    
            x-Token: valid_access_token
            
    + Body

            {
                "reassign_auto_messages_admin_id": "45353453534534",
                "reassign_replies_admin_id": "324353534324"
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "reassign_auto_messages_admin_id should be ObjectID",
            "attribute": "reassign_auto_messages_admin_id",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Application collection [/app]

## Create application [POST]

+ Request (application/json)

    + Attributes
        + terms_of_service (boolean, required) - User must accept Captivate terms of service.
        + admin
            + role (string) - Admin role.
        + app
            + name (string, required) - Client application name.
            + url (string, required) - Client application URL.
        + messanger_settings
            + default_locate (string, required) - Set "en" for English.
            + supported_locates (array) - An array of locales settings. 
                
                For each locale the following parameters should be specified: "locale_id", "name", "user_welcome_message", "visitor_welcome_message", "is_permitted". 
                For more information look into request sample.
        + appearance_settings
            + base_color (string, required) - Hex Color Code for base theme.

    + Headers
        
            x-Token: valid_access_token

    + Body

            {
                "terms_of_service": true,
                "admin": {
                    "role": "Design"
                },
                "app": {
                    "name": "MyComp",
                    "url": "www.example.com"
                },
                "messanger_settings": {
                    "default_locale": "en",
                    "supported_locales": [
                        {
                            "locale_id": "en",
                            "name": "English",
                            "user_welcome_message": "Ask us anything, or share your feedback.",
                            "visitor_welcome_message": "Have a question? Chat with us",
                            "is_permitted": true
                        }
                    ]
                },
                "appearance_settings": {
                    "base_color": "#0071b2"
                }
            }

+ Response 200 (application/json)

    + Attributes
        + id (string) - Id of created App.
        + name (string) - Name of created App.

    + Body

            {
                "id": "app id",
                "name": "MyComp"
            }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Update application [PUT /app/{id}]
Don't use this endpoint, for updating Application use *_settings endpoints.

+ Parameters 

    + id (string) - application id

+ Request (application/json)

    + Attributes
        + message_from_email (enum)
            + app (string)
            + service (string)
    
    + Headers  
    
            x-Token: valid_access_token

    + Body

            {
                "message_from_email": "app"
            }

+ Response 200 (application/json)

    + Body 

            {
                "id": "app id",
                "name": "MyComp"
            }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Delete application [DELETE /app/{id}]

+ Parameters 

    + id (string) - application id
    
+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token

    + Body 
 
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Forbidden",
            "raw_message": "forbidden",
            "error_type": "forbidden"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "app not found",
            "error_type": "not_found"
        }

## Get inboxes [GET /app/inboxes]

+ Request (application/json)

    + Headers  
    
            X-Token: valid_access_token

    + Body 
            
            {}

+ Response 200 (application/json)

    + Body 

            [
                {
                    "identifier": "all",
                    "type": "base",
                    "name": "All",
                    "count": 0,
                    "count_closed": 0,
                    "count_opened": 0
                },
                {
                    "identifier": "mentioned",
                    "type": "base",
                    "name": "Mentioned",
                    "count": 0,
                    "count_opened": 0,
                    "count_closed": 0
                },
                {
                    "identifier": "unassigned",
                    "type": "base",
                    "name": "Unassigned",
                    "count": 0,
                    "count_opened": 0,
                    "count_closed": 0
                },
                {
                    "id": "56ba70c0b63e6908233dcb8a",
                    "identifier": "56ba70c0b63e6908233dcb8a",
                    "type": "admin",
                    "name": "Admin",
                    "email": "admin@gmail.com",
                    "count": 0,
                    "count_opened": 0,
                    "count_closed": 0
                },
                {
                    "id": "5e624218fd35e700111c852e",
                    "identifier": "5e624218fd35e700111c852e",
                    "type": "team",
                    "name": "New",
                    "count": 0,
                    "count_opened": 0,
                    "count_closed": 0
                }
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Read general settings [GET /app/general_settings]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

    + Body 

            {
                "time_zone_name": "America/Los_Angeles",
                "force_2fa": false,
                "should_gather_social_data": false,
                "companies_enabled": false,
                "uses_test_app": false,
                "customer_has_active_subscription": false,
                "authorized_sign_in_methods": [
                    "email_password",
                    "email_password_otp",
                    "google_oauth2"
                ],
                "can_enable_enforce_sso": false,
                "app_name": "Captivate"
            }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Forbidden",
            "raw_message": "forbidden",
            "error_type": "forbidden"
        }

## Edit general settings [POST /app/general_settings]

+ Request (application/json)

    + Attributes
        + time_zone_name (string)
        + force_2fa (boolean)
        + should_gather_social_data (boolean)
        + companies_enabled (boolean)
        + uses_test_app (boolean)
        + customer_has_active_subscription (boolean)
        + authorized_sign_in_methods (array)
        + can_enable_enforce_sso (boolean)
        + app_name (string)
        + avatar
        + googleSignIn (boolean)
        + twoFactorAuthentication (boolean)
        + companies (boolean)
        + testVersion (boolean)
    
    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "time_zone_name": "America/Los_Angeles",
                "force_2fa": false,
                "should_gather_social_data": false,
                "companies_enabled": true,
                "uses_test_app": false,
                "customer_has_active_subscription": false,
                "authorized_sign_in_methods": [
                                                "email_password",
                                                "email_password_otp",
                                                "google_oauth2"
                                              ],
                "can_enable_enforce_sso": false,
                "app_name": "Captivate",
                "avatar": null,
                "googleSignIn": false,
                "twoFactorAuthentication": false,
                "companies": false,
                "testVersion": false 
            }

+ Response 200 (application/json)

        {
            "time_zone_name": "America/Los_Angeles",
            "force_2fa": false,
            "should_gather_social_data": false,
            "companies_enabled": false,
            "uses_test_app": false,
            "customer_has_active_subscription": false,
            "authorized_sign_in_methods": [
                "email_password",
                "email_password_otp",
                "google_oauth2"
            ],
            "can_enable_enforce_sso": false,
            "app_name": "Captivate"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Forbidden",
            "raw_message": "forbidden",
            "error_type": "forbidden"
        }

## Read messaging settings [GET /app/messaging_settings]

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "default_assignee_id": "0",
            "comment_placeholder": "Hello {{first_name | fallback: \"there\" }},",
            "hide_all_unsubscribe_links": false,
            "incoming_email_address": "57cdb4a0ea04b88c09397b11@incoming.riika.com"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Edit messaging settings [POST /app/messaging_settings]

+ Request (application/json)

    + Headers  

            X-Token: valid_access_token
    
    + Body 

            {
                "comment_placeholder": "Hi {{first_name}},",
                "default_assignee_id": "0",
                "hide_all_unsubscribe_links": false
            }

+ Response 200 (application/json)

        {
            "comment_placeholder": "Hi {{first_name}},",
            "default_assignee_id": "0",
            "hide_all_unsubscribe_links": false
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Read messanger settings [GET /app/messanger_settings]

+ Request (application/json)

    + Headers  
    
            X-Token: valid_access_token
    
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "rtm_enabled": true,
            "messenger_enabled_for_signed_in_users": true,
            "messenger_enabled_for_anonymous": true,
            "widget_audio_enabled": true,
            "widget_responder_enabled": true,
            "widget_responder_message": "We'll notify you here and by email when we reply.",
            "response_time": 0,
            "default_locale": "en",
            "parsed_allowed_domains": ["domain"],
            "custom_response_delay_enabled": false,
            "custom_response_delay": 0,
            "supported_locales": [
                {
                    "locale_id": "en",  
                    "name": "English",  
                    "welcome_message": "Hello, there"
                },
            ],
            "office_hours": [
                {
                    "period": "weekends", // 'everyday', 'weekdays', 'weekends', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
                    "start_time": 540, // minutes from 0 to 1440
                    "end_time": 1080, // minutes from 0 to 1440
                }
            ],
            "custom_response_delay_options": {
                "_0": "Typically replies in a few minutes",
                "_1": "Typically replies in a few hours",
                "_2": "Typically replies in a day"
            },
            "available_locales": [
                {
                    "locale_id": "ar",
                    "name": "Arabic"
                },
                // ...
            ],
            "available_browser_locales": [
                {
                    "locale_id": "ar",
                    "name": "Arabic"
                },
                // ...
            ]
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Edit messanger settings [POST /app/messanger_settings]

+ Request (application/json)

    + Headers  
    
            X-Token: valid_access_token
    
    + Body 

            {
                "rtm_enabled": true,
                "messenger_enabled_for_signed_in_users": true,
                "messenger_enabled_for_anonymous": true,
                "widget_audio_enabled": true,
                "widget_responder_enabled": true,
                "widget_responder_message": "We'll notify you here and by email when we reply.",
                "response_time": 0,
                "default_locale": "en",
                "parsed_allowed_domains": ["domain"],
                "custom_response_delay_enabled": false,
                "custom_response_delay": 0,
                "supported_locales": [
                    {
                        "locale_id": "en",  
                        "name": "English",  
                        "welcome_message": "Hello, there"
                    },
                ],
                "office_hours": [
                    {
                      "period": "weekends", // 'everyday', 'weekdays', 'weekends', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
                      "start_time": 540, // minutes from 0 to 1440
                      "end_time": 1080, // minutes from 0 to 1440
                    }
                ],
                "custom_response_delay_options": {
                    "_0": "Typically replies in a few minutes",
                    "_1": "Typically replies in a few hours",
                    "_2": "Typically replies in a day"
                },
                "available_locales": [
                    {
                       "locale_id": "ar",
                       "name": "Arabic"
                    },
                    // ...
                ],
                "available_browser_locales": [
                    {
                        "locale_id": "ar",
                        "name": "Arabic"
                    },
                    // ...
                ]
            }

+ Response 200 (application/json) 

        {
            "rtm_enabled": true,
            "messenger_enabled_for_signed_in_users": true,
            "messenger_enabled_for_anonymous": true,
            "widget_audio_enabled": true,
            "widget_responder_enabled": true,
            "widget_responder_message": "We'll notify you here and by email when we reply.",
            "response_time": 0,
            "default_locale": "en",
            "parsed_allowed_domains": ["domain"],
            "custom_response_delay_enabled": false,
            "custom_response_delay": 0,
            "supported_locales": [
                {
                    "locale_id": "en",  
                    "name": "English",  
                    "welcome_message": "Hello, there"
                },
            ],
            "office_hours": [
                {
                    "period": "weekends", // 'everyday', 'weekdays', 'weekends', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
                    "start_time": 540, // minutes from 0 to 1440
                    "end_time": 1080, // minutes from 0 to 1440
                }
            ],
            "custom_response_delay_options": {
                "_0": "Typically replies in a few minutes",
                "_1": "Typically replies in a few hours",
                "_2": "Typically replies in a day"
            },
            "available_locales": [
                {
                    "locale_id": "ar",
                    "name": "Arabic"
                },
                // ...
            ],
            "available_browser_locales": [
                {
                    "locale_id": "ar",
                    "name": "Arabic"
                },
                // ...
            ]
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Read messanger appearance settings [GET /app/appearance_settings]

+ Request (application/json)

    + Headers  
    
            X-Token: valid_access_token
    
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "base_color": "#0071b2",
            "show_powered_by": true,
            "messenger_background": "background-1",
            "messenger_enabled_for_visitors": true,
            "messenger_enabled_for_users": true,
            "messenger_padding_horizontal": 10, 
            "messenger_padding_vertical": 10,
            "messenger_position": "left",
            "reply_disabled_for": [],
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Edit messanger appearance settings [POST /app/appearance_settings]

+ Request (application/json)

    + Headers  
    
            X-Token: valid_access_token
    
    + Body 

            {
                "reply_disabled_for":[
                    "lead",
                    "visitor",
                    "user"
                ],
                "base_color": "#0071b2",
                "show_powered_by": true,
                "messenger_background": "background-1",
                "messenger_enabled_for_visitors": true,
                "messenger_enabled_for_users": true,
                "messenger_position": "left", // left or right
                "messenger_padding_horizontal": 10, // default is 20 
                "messenger_padding_vertical": 10 // defaults is 20 
            }

+ Response 200 (application/json)

        {
            "base_color": "#0071b2",
            "show_powered_by": true,
            "messenger_background": "background-1",
            "messenger_enabled_for_visitors": true,
            "messenger_enabled_for_users": true,
            "messenger_padding_horizontal": 10, 
            "messenger_padding_vertical": 10,
            "messenger_position": "left",
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Upload application logo [POST /app/upload_logo]

+ Request

    + Headers  
    
            Content-type: Application/json; boundary=---BOUNDARY
    
    + Body 
            
            -----BOUNDARY
            Content-Disposition: form-data; name="image"; filename="SomeImage.jpg"
            Content-Type: image/jpeg
            Content-Transfer-Encoding: base64

            /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
            HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
            MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
            AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
            AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
            -----BOUNDARY

+ Response 200 (application/json)

        {
            "status": "ok"
        }

## Send email with widget installation instructions [POST /app/send_email_widget_installation]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "email": "email@example.com",
                "snippet_id": "visitor" // visitor | user
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Email should be correct",
            // Email should be required
            // snippet_id should be required
            "error_type": "invalid_request"   
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found snippet",
            "error_type": "not_found"
        }

## Add SparkPost key [POST /email_sending/add_api_key]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id
    
    + Body 

            {
                "service": "sparkpost",
                "domain": "mydomain.com",
                "api_key": "sparkpost api key with related permissions"
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Domain not found", // App not found
            "error_type": "not_found"
        }

## Get domain verification info [POST /email_sending/get_domain_verification_info]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id
    
    + Body 

            {
                "service": "sparkpost",
                "domain": "mydomain.com"
            }

+ Response 200 (application/json)

        {
            "mail_server": {
                "valid": true,
                "type": "mx",
                "host": "_prefix.mydomain.com",
                "data": "mx.sendgrid.net."
            },
            "subdomain_spf": {
                "valid": true,
                "type": "txt",
                "host": "_prefix.mydomain.com",
                "data": "v=spf1 include:sendgrid.net ~all"
            },
            "dkim": {
                "valid": true,
                "type": "txt",
                "host": "abc._domainkey.mydomain.com",
                "data": "k=rsa; t=s; p=MIGfM..."
            }
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Domain not found", // App not found
            "error_type": "not_found"
        }

## Verify domain [POST /email_sending/verify_domain]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id
    
    + Body 

            {
                "domain": "mydomain.com",
                "service": "sparkpost"
            }

+ Response 200 (application/json)

        {
            "domain": "mydomain.com",
            "is_verified": true // or false
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Domain not found", // App not found
            "error_type": "not_found"
        }





# CSV export collection [/csv_export]

## Add and launch csv export [POST]
Allowed for admins with permission ***can_export_data***

+ Request (application/json)

    + Attributes
        + all_attributes (string) - default FALSE, if true will export all attribute, otherwise only visible attributes
        + export_type (enum, required) - defaults to user
            + user (string)
            + company (string)
        + included_ids (array) - List IDs of users/companies for export, required if query type is 'ids'
        + predicates (array) - predicates for searching users/companies, required if query type is 'predicates'
            + (object)
                + type (string)
                + attribute (string)
                + comparison (string)
                + value (string) - value type related with type attribute
                + operator (string)
        + new_message_id (string) - NewMessage id, required if query_type is message
        + action (enum, required) - NewMessage report type, required if query_type is message
            + sent (string)
            + opened (string)
            + clicked (string)
            + replied (string)
            + unsubscribed (string)
            + bounced (string)
            + hit_goal (string)
        + query_type (enum, required)
            + ids (string, required)
            + predicates (string, required) 
            + message (string, required)

    + Headers  
    
            X-App: App_id
            X-Token: valid_access_token
    
    + Body 

            {
                "all_attributes":false,
                "export_type":"user",
                "included_ids": [],
                "predicates":[
                    {
                        "type":"date",
                        "attribute":"last_request_at",
                        "comparison":"gt",
                        "value":30,
                        "operator": "and"
                    },
                    {
                        "type":"string",
                        "attribute":"role",
                        "comparison":"eq",
                        "value":"user",
                        "operator": "and"
                    }
                ],
                "new_message_id": "new message id",
                "action": "sent",
                "query_type":"predicates"
            }

+ Response 200 (application/json)

        {
            "file_url": "",
            "find_type": "user",
            "export_type": "user",
            "app_id": "56be64e1d18189818ecfd226",
            "admin_id": "5c85e82dfe8bcb00108f18ca",
            "launched_at": "2019-06-12T14:57:29.976Z",
            "completed_at": null,
            "user_count": null,
            "created_at": "2019-06-12T14:57:29.973Z",
            "updated_at": "2019-06-12T14:57:29.976Z",
            "id": "5d0112d9da7d9f00106d1f2a"
        }

+ Response 400 (application/json)

        {
            "raw_message": "param `predicates` is required",
            "attr": "predicates",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Get csv export info [GET /csv_export/{export_id}]

+ Parameters 

    + export_id (string) - id of export procedure

+ Request (application/json)

    + Headers
    
            X-App: App_id
            X-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "file_url": "https://w-media-testing.s3.amazonaws.com/exports/64a3d30f42d8c45daf57e9c7b08ceaa55a99c673.csv",
            "find_type": "user",
            "export_type": "user",
            "app_id": "5d7420cd9283e20020eb7ec6",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": "2020-03-20T14:53:00.374Z",
            "completed_at": "2020-03-20T15:33:49.764Z",
            "user_count": 11,
            "created_at": "2020-03-20T14:53:00.367Z",
            "updated_at": "2020-03-20T15:33:49.768Z",
            "id": "5e74d8cccc1e7e00111b8812"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Cannot read property 'data' of undefined",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

# CSV import collection [/csv_import{?user_type,ngsw%2Dbypass}]

## Add csv import [POST]

+ Parameters

    + user_type: users (string)
    + ngsw%2Dbypass: true (boolean)

+ Request

    + Headers  
    
            Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryRE1uud8vYUmmL1U1
            X-App: App_id
            X-Token: valid_access_token
            
    + Body 
            
            ------WebKitFormBoundaryRE1uud8vYUmmL1U1
            Content-Disposition: form-data; name="file"; filename="ToImport_1.csv"
            Content-Type: text/csv
            
            
            ------WebKitFormBoundaryRE1uud8vYUmmL1U1--

+ Response 200 (application/json)

        {
            "tag_id": null,
            "tag_name": "CSV Import - 2020-03-20 16:12:35 UTC",
            "user_type": "users",
            "column_assignments": [],
            "additional_tags": [],
            "stats": {},
            "row_count": 2,
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": null,
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-20T16:12:35.636Z",
            "updated_at": "2020-03-20T16:12:35.636Z",
            "id": "5e74eb73cc1e7e00111b881d",
            "preview_columns": [
                null
            ]
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not valid file type", // or Not found rows
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Set tags for csv import [PUT /csv_import/{id}/tags]

+ Parameters 

    + id (string) - csv import id 

+ Request (Application/json)

    + Attributes

        + tags (array, required) - Array of tags ids
            + ["tag1_id"] (string)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 

            {
                "tags": [
                    "tag1_id",
                    "tagN_id"
                ]
            }

+ Response 200 (application/json)

        {
            "tag_id": null,
            "tag_name": "CSV Import - 2020-03-23 13:55:04 UTC",
            "user_type": "leads",
            "column_assignments": [],
            "additional_tags": [
                "5e7627930128b50011e9685a"
            ],
            "stats": {},
            "row_count": 2,
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": null,
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-23T13:55:04.832Z",
            "updated_at": "2020-03-23T14:20:19.970Z",
            "id": "5e78bfb846ad7c00110cc22c"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "tags is required",
            "attribute": "tags",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## CSV import, column assignments [PUT /csv_import/{id}/column_assignments]

+ Parameters 

    + id (string) - csv import id 

+ Request (application/json)

    + Attributes

        + column_assignments (array, required)
            + (object)
                + column_name (string, required) - "new attr"
                + column_index (number, required) - "0"
                + data_type (enum, required)
                    + String (string)
                    + Date (string)
                    + Number (string)
                    + Boolean (string)
    
    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 

            {
                "column_assignments": [
                    {
                        "column_name": "name",
                        "column_index": 0,
                        "data_type": "String"
                    },
                    {
                        "column_name": "email",
                        "column_index": 1,
                        "data_type": "String"
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "tag_id": null,
            "tag_name": "CSV Import - 2020-01-19 19:30:24 UTC",
            "user_type": "users",
            "column_assignments": [
                {
                    "column_name": "name",
                    "column_index": 0,
                    "data_type": "String"
                },
                {
                    "column_name": "email",
                    "column_index": 1,
                    "data_type": "String"
                }
            ],
            "additional_tags": [],
            "stats": {},
            "row_count": 2,
            "app_id": "5d7420cd9283e20020eb7ec6",
            "admin_id": "5c857b90fe8bcb00108f1653",
            "launched_at": null,
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-01-19T19:30:24.258Z",
            "updated_at": "2020-03-24T13:40:22.453Z",
            "id": "5e24ae50ea74ce00119ddc90"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found job",
            "error_type": "not_found"
        }

## Launch CSV Import [POST /csv_import/{id}/launch]

+ Parameters 

    + id (string) - csv import id 

+ Request (application/json)
    
    + Headers  

            X-App: App_id
            X-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "tag_id": "5e7a129238cff5002010a95f",
            "tag_name": "CSV Import - 2019-04-02 16:38:10 UTC",
            "user_type": "users",
            "column_assignments": [
                {
                    "column_name": "email",
                    "column_index": 0,
                    "data_type": "String"
                }
            ],
            "additional_tags": [],
            "stats": {},
            "row_count": 2,
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": "2020-03-24T14:00:50.577Z",
            "completed_at": null,
            "user_count": null,
            "created_at": "2019-04-02T16:38:10.645Z",
            "updated_at": "2020-03-24T14:00:50.579Z",
            "id": "5ca38ff2b677b30010cd4889"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Tag \"CSV Import - 2019-04-02 16:38:10 UTC\" already exist",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found import",
            "error_type": "not_found"
        }

## Check CSV import [GET /csv_import/{id}]

+ Parameters 

    + id (string) - csv import id 

+ Request (application/json)

    + Headers  
    
            X-App: App_id
            X-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (applciation/json)

        {
            "tag_id": {},
            "tag_name": "CSV Import - 2020-01-19 19:30:24 UTC",
            "user_type": "users",
            "column_assignments": [],
            "additional_tags": [],
            "stats": {},
            "row_count": 2,
            "app_id": "5d7420cd9283e20020eb7ec6",
            "admin_id": "5c857b90fe8bcb00108f1653",
            "launched_at": {},
            "completed_at": {},
            "user_count": {},
            "created_at": "2020-01-19T19:30:24.258Z",
            "updated_at": "2020-01-19T19:30:24.258Z",
            "id": "5e24ae50ea74ce00119ddc90"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Cannot read property 'data' of undefined",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## List CSV Import [GET]

+ Request (application/json)


    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "admin_id": "5c60465aef96db00109429ef",
                "type": "import_csv",
                "data": {
                    "tag_id": "5ca3926bb677b30010cd489a",
                    "tag_name": "CSV Import - 2019-04-02 15:39:01 UTC",
                    "user_type": "users",
                    "filename": "https://w-media-testing.s3.amazonaws.com/tmp/bdfb8bcd13eea41de2498341acfa2c02bdc3d660.csv",
                    "column_assignments": [
                        {
                            "column_name": "email",
                            "column_index": 0,
                            "data_type": "String"
                        },
                        {
                            "column_name": "referral_url",
                            "column_index": 2,
                            "data_type": "String"
                        }
                    ],
                    "additional_tags": [],
                    "stats": {
                        "inserted": 2,
                        "updated": 0,
                        "failed": 0
                    },
                    "row_count": 2,
                    "error_insert_user_logs": []
                },
                "launched_at": "2019-04-02T16:48:43.574Z",
                "completed_at": "2019-04-02T16:48:43.916Z",
                "user_count": 2,
                "created_at": "2019-04-02T15:39:01.669Z",
                "updated_at": "2019-04-02T16:48:43.918Z",
                "id": "5ca38215b677b30010cd487e"
            }   // other imports
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Mailchimp import [/mailchimp_import]

## Add mailchimp import [POST]

+ Request (application/json)

    + Attributes
        
        + access_token (string, required) - Mailchimp access token
        + list_id (string, required) - Mailchimp list id
        + tags (string) - array of exists tag ids

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "access_token": "token from mailchimp",
                "list_id": "list id from mailchimp",
                "tags": [
                    "tag1_id",
                    "tagN_id"
                ]
            }

+ Response 200 (application/json)

        {
            "access_token": "871c97142b445f8d0987044c34b12089-us20",
            "list_id": "7fcf7b4916",
            "tag_id": null,
            "tag_name": "Mailchimp Import - 2020-03-24 15:16:23 UTC",
            "additional_tags": [
                "5e762cf40128b50011e9685c"
            ],
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": null,
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-24T15:16:23.730Z",
            "updated_at": "2020-03-24T15:16:23.730Z",
            "id": "5e7a244738cff5002010a960"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Launch mailchimp import [POST /mailchimp_import/launch]

+ Request (application/json)

    + Attributes

        + import_id (string, required) - Mailchimp import id

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 

            {
                "import_id": "5e7a244738cff5002010a960"
            }

+ Response 200 (application/json)

        {
            "access_token": "871c97142b445f8d0987044c34b12089-us20",
            "list_id": "7fcf7b4916",
            "tag_id": "5e7a281238cff5002010a965",
            "tag_name": "Mailchimp Import - 2020-03-24 15:16:23 UTC",
            "additional_tags": [
                "5e762cf40128b50011e9685c"
            ],
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": "2020-03-24T15:32:34.194Z",
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-24T15:16:23.730Z",
            "updated_at": "2020-03-24T15:32:34.218Z",
            "id": "5e7a244738cff5002010a960"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found import",
            "error_type": "not_found"
        }

## Check mailchimp import [GET /mailchimp_import/{import_id}]

+ Parameters 

    + import_id (string) - import id

+ Request (application/json)

    + Headers  

            X-App: App_id
            X-Token: valid_access_token
    
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "access_token": "871c97142b445f8d0987044c34b12089-us20",
            "list_id": "7fcf7b4916",
            "tag_id": "5e7a281238cff5002010a965",
            "tag_name": "Mailchimp Import - 2020-03-24 15:16:23 UTC",
            "additional_tags": [
                "5e762cf40128b50011e9685c"
            ],
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": "2020-03-24T15:32:34.194Z",
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-24T15:16:23.730Z",
            "updated_at": "2020-03-24T15:32:34.218Z",
            "id": "5e7a244738cff5002010a960"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Cannot read property 'data' of undefined",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update mailchip import tags [POST /mailchimp_import/update_tags]

+ Request (application/json)

    + Attributes
        
        + import_id (string, required) - Mailchimp import id
        + tags (string) - array of exists tag ids

    + Headers  

            X-App: App_id
            X-Token: valid_access_token
    
    + Body 

            {
                "import_id": "5e7a244738cff5002010a960",
                "tags": [
                    "tag1_id",
                    "tagN_id"
                ]
            }

+ Response 200 (application/json)

        {
            "access_token": "871c97142b445f8d0987044c34b12089-us20",
            "list_id": "7fcf7b4916",
            "tag_id": "5e7a281238cff5002010a965",
            "tag_name": "Mailchimp Import - 2020-03-24 15:16:23 UTC",
            "additional_tags": [
                "5e6a5a5182a68800115c782b"
            ],
            "app_id": "5c60465aef96db00109429f0",
            "admin_id": "5c60465aef96db00109429ef",
            "launched_at": "2020-03-24T15:32:34.194Z",
            "completed_at": null,
            "user_count": null,
            "created_at": "2020-03-24T15:16:23.730Z",
            "updated_at": "2020-03-25T13:53:47.471Z",
            "id": "5e7a244738cff5002010a960"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not updated import",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## List mailchimp imports [GET]

+ Request (application/json)

    + Headers  

            X-App: App_id
            X-Token: valid_access_token

    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "admin_id": "5c60465aef96db00109429ef",
                "type": "import_mailchimp",
                "data": {
                    "access_token": "871c97142b445f8d0987044c34b12089-us20",
                    "list_id": "7fcf7b4916",
                    "tag_id": "5e7a281238cff5002010a965",
                    "tag_name": "Mailchimp Import - 2020-03-24 15:16:23 UTC",
                    "additional_tags": [
                        "5e6a5a5182a68800115c782b"
                    ]
                },
                "launched_at": "2020-03-24T15:32:34.194Z",
                "completed_at": null,
                "user_count": null,
                "created_at": "2020-03-24T15:16:23.730Z",
                "updated_at": "2020-03-25T13:53:47.471Z",
                "id": "5e7a244738cff5002010a960"
            },
            {
                "app_id": "5c60465aef96db00109429f0",
                "admin_id": "5c60465aef96db00109429ef",
                "type": "import_mailchimp",
                "data": {
                    "access_token": "71c97142b445f8d0987044c34b12089-us20",
                    "list_id": "7fcf7b4916",
                    "tag_id": null,
                    "tag_name": "Mailchimp Import - 2020-03-24 15:18:28 UTC",
                    "additional_tags": [
                        "5e762cf40128b50011e9685c"
                    ]
                },
                "launched_at": null,
                "completed_at": null,
                "user_count": null,
                "created_at": "2020-03-24T15:18:28.926Z",
                "updated_at": "2020-03-24T15:18:28.926Z",
                "id": "5e7a24c438cff5002010a961"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

# Tags collection [/tag]

## List all tags [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "name": "CSV Import - 2019-04-02 15:39:01 UTC",
                "created_at": "2019-04-02T16:48:43.572Z",
                "id": "5ca3926bb677b30010cd489a"
            },
            {
                "app_id": "5c60465aef96db00109429f0",
                "name": "CSV Import - 2019-04-08 12:40:05 UTC",
                "created_at": "2019-04-08T12:40:23.423Z",
                "id": "5cab4137fdefe00010ef4569"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## List tags by ids [GET /tag/search{?ids}]

+ Parameters 

    + ids (string) - comma separated list of tags ID without space.
    
+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "name": "CSV Import - 2019-04-08 12:40:05 UTC",
                "created_at": "2019-04-08T12:40:23.423Z",
                "id": "5cab4137fdefe00010ef4569"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## List tags by used in [GET /tag/used{?model}]

+ Parameters 

    + model: User (string, required) - values - User, Company or Message
    
+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "name": "CSV Import - 2019-04-08 12:40:05 UTC",
                "created_at": "2019-04-08T12:40:23.423Z",
                "id": "5cab4137fdefe00010ef4569"
            }
        ]

+ Response 400 (application/json)

        {
            "raw_message": "model param is required",
            "attr": "model",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Create tag [POST]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "name": "name new_tag"
            }

+ Response 201 (application/json)

        {
            "name": "name new_tag",
            "app_id": "5c60465aef96db00109429f0",
            "created_by_id": "5c60465aef96db00109429ef",
            "created_at": "2020-03-21T14:41:23.353Z",
            "id": "5e7627930128b50011e9685a"    
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Attributes collection [/attribute]
Custom attributes are added automaticaly when user is being added, or you can add manualy. **Don't delete attributes**

## List all attributes [GET /attribute{?limit}]

+ Parameters
    + limit: 0 (number, optional)

+ Request (application/json)

    + Headers  

            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "id": "586c13daf0d5dbce55c00a0f",
                "name": "company.monthly_spend",
                "title": "Monthly Spend",
                "category": "Company Data",
                "is_custom": false,
                "app_id": null,
                "is_company": true,
                "type": "float",
                "in_template": true,
                "in_message_goal": true,
                "archived": null,
                "description": "The monthly revenue you receive from a company",
                "hyper_type": "number",
                "in_grid": true
            },
            {
                "id": "58cc783e2fa40ebc1e1b1daf",
                "app_id": null,
                "name": "ios_app_name",
                "is_custom": false,
                "title": "iOS App Name",
                "category": "Mobile Data",
                "is_company": false,
                "type": "string",
                "in_template": false,
                "in_message_goal": false,
                "archived": null,
                "description": "",
                "is_mobile": true,
                "hyper_type": "string",
                "in_grid": false
            } // list of all attributes
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Add custom attribute [POST]

+ Request (application/json)

    + Headers  
    
               x-Token: valid_access_token
    
    + Body 

            {
                "title": "Name attribute",
                "description": "Description attribute",
                "type": "text",
                "isTypeUser": true
            }

+ Response 201 (application/json)

        {
            "type": "text",
            "title": "New compnay attr",
            "description": "New company attr",
            "is_company": false,
            "is_custom": true,
            "in_grid": false,
            "archived": true,
            "owner_name": "",
            "id": "5e760b820128b50011e96846"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Update custom attribute [PUT /attribute/{id}]

+ Parameters

    + id (string, required) - Id of custom attribute

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
    
    + Body 

            {
                "title": "Name attribute",
                "description": "Description attribute",
                "type": "text",
                "isTypeUser": true
            }

+ Response 200 (application/json)

        {
            "type": "text",
            "title": "Name att",
            "description": "Description attribute",
            "is_company": false,
            "is_custom": true,
            "in_grid": false,
            "archived": true,
            "owner_name": "",
            "id": "5e7611650128b50011e9684c"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not found",
            "error_type": "not_found"
        }

# Segments [/segment]

## List all segments [GET]

+ Request (application/json)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "created_by_id": null,
                "is_company": false,
                "name": "All Users",
                "predicates": [
                    {
                        "type": "string",
                        "attribute": "role",
                        "comparison": "eq",
                        "value": "user"
                    }
                ],
                "is_editable": false,
                "always_visible": true,
                "count": 2,
                "created_at": "2019-02-10T15:42:18.188Z",
                "id": "5c60465aef96db00109429f6"
            },
            {
                "app_id": "5c60465aef96db00109429f0",
                "created_by_id": null,
                "is_company": true,
                "name": "Active",
                "predicates": [
                    {
                        "type": "date",
                        "attribute": "last_request_at",
                        "comparison": "gt",
                        "value": 30
                    }
                ],
                "is_editable": false,
                "count": 0,
                "always_visible": false,
                "created_at": "2019-02-10T15:42:18.189Z",
                "id": "5c60465aef96db00109429f7"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

# Notes [/note]

## Add note [POST]

+ Request (application/json)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 

            {
                "body": "Text note",
                "model_id": "569d38a3ec2f891cd600098b",
                "is_company": false
            }

+ Response 201 (application/json) 

        {
            "body": "Text note",
            "is_company": false,
            "model_id": "5da9ddb3a4ce2d0010ad6f53",
            "app_id": "5c60465aef96db00109429f0",
            "created_by": "5c60465aef96db00109429ef",
            "body_html_safe": "<p>dsafasdf</p>",
            "created_at": "2020-03-25T14:41:30.985Z",
            "updated_at": "2020-03-25T14:41:30.985Z",
            "id": "5e7b6d9a5562210020ebcc13"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not found",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Edit note [PUT /note/{id}]

+ Parameters

    + id (string, required) - Note id

+ Request (application/json)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 

            {
                "body": "Text note 11111111"
            }

+ Response 200 (application/json)

        {
            "body": "Text note 11111111",
            "is_company": false,
            "model_id": "5da9ddb3a4ce2d0010ad6f53",
            "app_id": "5c60465aef96db00109429f0",
            "created_by": "5c60465aef96db00109429ef",
            "body_html_safe": "<p>new note 2</p>",
            "created_at": "2020-03-25T14:51:46.144Z",
            "updated_at": "2020-03-25T15:13:24.154Z",
            "updated_by": "5c60465aef96db00109429ef",
            "id": "5e7b70025562210020ebcc17"
        }

+ Response 400 (application/json)

        {
            "raw_message": "body id required",
            "attr": "body",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Note not found",
            "error_type": "not_found"
        }

## Delete note [DELETE /note/{id}]

+ Parameters

    + id (string, required) - Note id

+ Request (application/json)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
    
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Note not found",
            "error_type": "not_found"
        }

## List all notes by parent id [GET /note{?model_id}]

+ Parameters 

    + model_id (string) - User/Lead or Company id

+ Request (application/json)

    + Headers  
    
            x-App: App_id
            x-Token: valid_access_token
            
    + Body 
    
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "created_by": "5c60465aef96db00109429ef",
                "body": "dsafasdf",
                "is_company": false,
                "model_id": "5da9ddb3a4ce2d0010ad6f53",
                "body_html_safe": "<p>dsafasdf</p>",
                "created_at": "2020-03-25T14:41:30.985Z",
                "updated_at": "2020-03-25T14:41:30.985Z",
                "id": "5e7b6d9a5562210020ebcc13"
            },
            {
                "app_id": "5c60465aef96db00109429f0",
                "created_by": "5c60465aef96db00109429ef",
                "body": "Text note 1",
                "model_id": "5da9ddb3a4ce2d0010ad6f53",
                "is_company": false,
                "body_html_safe": "<p>Text note 1</p>",
                "created_at": "2020-03-25T14:49:21.072Z",
                "updated_at": "2020-03-25T14:49:21.072Z",
                "id": "5e7b6f715562210020ebcc15"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

# Email Templates collections [/emailtemplate]

## List all email templates [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

            [
                {
                    "name" : "Test template",
                    "content": "<p>some content in HTML</p>",
                    "id" : "569d36d20691ee79dd000591"
                }
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## List all email templates without content [GET /emailtemplate/list]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "name": "Plain",
                "id": "plain"
            },
            {
                "name": "Announcement",
                "id": "announcement"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Duplicate email template [POST /emailtemplate/duplicate]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 

            {
                "source_id": "569d36d20691ee79dd000591"
            }

+ Response 200 (application/json)

        {
            "name" : "Test template",
            "content": "<p>some content</p>",
            "app_id": "5c60465aef96db00109429f0",
            "id" : "569d36d20691ee79dd000591"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not found source_id",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Get email template [GET /emailtemplate/{id}]

+ Parameters

    + id (string, optional) - Email template ID

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "type": "user",
            "name": "Plain",
            "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n</html>",
            "id": "plain"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Conversations collection [/conversation]

## List conversations [GET /conversation{?include_count,status,limit,skip,sort,search,tag_id,assignee_identifier}]

+ Parameters 

    + include_count: true (boolean, required)
    + status: "opened" (string, required) - will finds opened or closed conversations
    + limit: 15 (number, required) - amount of messages per page
    + skip: 0 (number, required)
    + sort: "last_message_at%20desc" (string, required) - order on current page
    + search: "search" (string, optional) - using when searching by conversation contain
    + tag_id: "5e7e15c569c98e001ec2404b" (string, optional) - using when searching by tag
    + assignee_identifier: "all" (string, required) - identifier from inboxes

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5d7420cd9283e20020eb7ec6",
                "assignee_id": "5c8a8e130533010010f1cb7f",
                "last_participating_admin": "5e513b298132ee00112d35b1",
                "admin_ids": [
                    "5c8a8e130533010010f1cb7f",
                    "5e513b298132ee00112d35b1"
                ],
                "participants": [
                    "5dfe4f3f2212ff001117575f"
                ],
                "type": "conversation",
                "conversation_parts": [
                    {
                        "app_id": "5d7420cd9283e20020eb7ec6",
                        "body": "<p align=\"left\">test</p>\n",
                        "conversation_id": "5e4ab2849d48ee00117d09e7",
                        "type": "comment",
                        "sub_type": "comment",
                        "message_type": "comment",
                        "blocks": [
                            {
                                "align": "left",
                                "type": "paragraph",
                                "text": "test"
                            }
                        ],
                        "upload_ids": [],
                        "admin_id": "5e513b298132ee00112d35b1",
                        "assignee_id": null,
                        "is_email": false,
                        "is_deleted": false,
                        "created_at": "2020-03-26T12:51:25.744Z",
                        "updated_at": "2020-03-26T12:51:25.744Z",
                        "id": "5e7ca54d8e83ee001e3697fa"
                    }
                ],
                "read_by_admin_at": null,
                "has_been_read": true,
                "read_at": "2020-03-26T15:42:13.048Z",
                "dismissed": true,
                "parts_count": 3,
                "reply_count": 1,
                "is_closed": false,
                "mentioned_admins": [],
                "mentioned_admins_unread": [],
                "created_at": "2020-02-17T15:34:28.008Z",
                "updated_at": "2020-03-26T15:37:28.176Z",
                "last_message_at": "2020-03-26T12:51:25.758Z",
                "id": "5e4ab2849d48ee00117d09e7",
                "conversation_stats": {
                    "read": 0,
                    "unread": 0
                }
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## List conversation messages [GET /conversation/{id}/messages]

+ Parameters 

    + id (string) - conversation id 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "deprecated",
            "messages": [
                {
                    "app_id": "5d7420cd9283e20020eb7ec6",
                    "participant_id": "5e7f367569c98e001ec2410d",
                    "conversation_id": "5e7f367b69c98e001ec24113",
                    "subject": null,
                    "body": "new",
                    "blocks": [
                        {
                            "type": "paragraph",
                            "text": "new",
                            "align": null
                        }
                    ],
                    "upload_ids": [],
                    "channel_type": "Chrome",
                    "user_agent": "Chrome (80.0.3987.149), Windows 7",
                    "type": "message",
                    "sub_type": null,
                    "message_type": "user",
                    "url": "http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/example.html?email=test@google.com",
                    "is_email": false,
                    "is_deleted": false,
                    "created_at": "2020-03-28T11:35:23.194Z",
                    "updated_at": "2020-03-28T11:35:23.194Z",
                    "id": "5e7f367b69c98e001ec24114"
                },
                {
                    "app_id": "5d7420cd9283e20020eb7ec6",
                    "participant_id": "5e7f367569c98e001ec2410d",
                    "conversation_id": "5e7f367b69c98e001ec24113",
                    "subject": null,
                    "body": "add",
                    "blocks": [
                        {
                            "type": "paragraph",
                            "text": "add",
                            "align": null
                        }
                    ],
                    "upload_ids": [],
                    "channel_type": "Chrome",
                    "user_agent": "Chrome (80.0.3987.149), Windows 7",
                    "type": "comment",
                    "sub_type": "comment",
                    "message_type": "comment",
                    "url": "http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/example.html?email=test@google.com",
                    "is_email": false,
                    "is_deleted": false,
                    "created_at": "2020-03-28T11:35:58.224Z",
                    "updated_at": "2020-03-28T11:35:58.224Z",
                    "id": "5e7f369e69c98e001ec24116"
                }
            ]
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Read conversation by admin [PUT /conversation/{id}/read_by_admin]

+ Parameters 

    + id (string) - conversation id 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Conversation not updated",
            "error_type": "invalid_request"
        }

## Add conversation to admin [PUT /conversation/{id}/add_admin]

+ Parameters

    + id (string, optional) - conversation id

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: App_id
        
    + Body

            {
                "admin": "admin id"
            }

+ Response 200 (application/json)

        {
            "n": 0,
            "nModified": 0,
            "opTime": {
                "ts": "6818105010094604289",
                "t": 39
            },
            "electionId": "7fffffff0000000000000027",
            "ok": 1,
            "$clusterTime": {
                "clusterTime": "6818105010094604289",
                "signature": {
                    "hash": "hZN7s9fZZG/AI5w7W8/BUOcTU88=",
                    "keyId": "6759628484898717698"
                }
            },
            "operationTime": "6818105010094604289"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Wrong admin Id",
            "error_type": "invalid_request"
        }

## My conversation [GET /conversation/mine]
Missing Function ***mine*** from ***ConverstionController***. 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok",
            "conversations": [
                {
                    "app_id": null,
                    "assignee_id": "5c60465aef96db00109429ef",
                    "last_participating_admin": "5c60465aef96db00109429ef",
                    "admin_ids": [
                        "5c60465aef96db00109429ef"
                    ],
                    "participants": [
                        "5d33fe48f72da40010e0c159"
                    ],
                    "type": "email",
                    "conversation_parts": [
                        "5d38f10049651e0010bb072b"
                    ],
                    "read_by_admin_at": null,
                    "has_been_read": false,
                    "read_at": null,
                    "dismissed": false,
                    "parts_count": 1,
                    "reply_count": 0,
                    "is_closed": false,
                    "mentioned_admins": [],
                    "mentioned_admins_unread": [],
                    "created_at": "2019-07-25T00:00:00.503Z",
                    "updated_at": "2019-07-27T13:27:41.665Z",
                    "last_message_at": "2019-07-25T00:00:00.513Z",
                    "id": "5d38f10049651e0010bb072a"
                }
            ]
        }

# Conversation draft collection [/conversation_draft]

## List of conversations draft [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

            [
                {
                    "conversation_id": "id",
                    "blocks": [
                                {
                                    "type": "paragraph",
                                    "text": "some text"
                                }
                              ],
                    "body": "<p>some text</p>",
                    "subclass": "comment"
                }
            ]

# Saved reply collection [/saved_reply]

## List of saved replies [GET /saved_reply]

(?) Ask dev to copy attributes from the source code. Too many attributes to copy. 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

            [
                {
                    "id": "id",
                    "admin_id": "id",
                    "name": "My saved reply",
                    "blocks": [
                                {
                                    "type": "paragraph",
                                    "text": "Hello {{ first_name | fallback : \"Bud\"}}"
                                }
                              ],
                    "body": "<p>Hello {{ first_name | fallback : \"Bud\"}}</p>",
                }
            ]

## Get prepared reply for conversation [GET /saved_reply/{id}/prepare]

(?) clarify `id` parameter. No info in existing doc 

+ Parameters 

    + id (string) - id 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

            {
                "id": "id",
                "admin_id": "id",
                "name": "My saved reply",
                "blocks": [
                            {
                                "type": "paragraph",
                                "text": "Hello John"
                            }
                          ],
                "body": "<p>Hello John</p>",
            }

# Message collection [/message]

## Send message /Socket/ [POST /conversation/message]
Send messages with `sub_type = assignment` allowed for admins with permission `can_reassign_conversations`

+ Request (applciation/json)

    + Headers  
    
            x-Token: valid_access_token

    + Body 

            {
                "conversation_id": "570e19d860e3dac89655a110",
                "sub_type": "comment",
                "uploads": [
                            "570e19d860e3dac89655a111"
                           ],
                "blocks": [
                            {
                            "type": "paragraph",
                            "text": "test-message"
                            }
                          ]
            }

+ Response 200 (application/json)

        {
            "status": "ok",
                "message": {
                            "app_id": "570e167e60e3dac89655a11d",
                            "body": "<p>test-message</p>",
                            "conversation_id": "570e19d860e3dac89655a110",
                            "type": "comment",
                            "sub_type": "comment",
                            "message_type": "comment",
                            "upload_ids": [
                                            "570e19d860e3dac89655a111"
                                          ],
                            "admin_id": "570e173660e3dac89655a11e",
                            "created_at": "2016-09-06T21:47:20.955Z",
                            "updated_at": "2016-09-06T21:47:20.955Z",
                            "id": "57cf396834667050126b382b",
                            "closer": false,
                            "opener": false
                            }
            }

## Update message tags [PUT /message/{id}/tags]

(?) clarify `id` parameter. No info in existing doc 

+ Parameters 

    + id (string) - id 

+ Request

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                "tags": [
                        "569d36d20691ee79dd000591",
                        "569d36d20691ee79dd000592"
                        ]
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok"
            }

# Events collection [/event]

## Get events [GET /event{?include_count,limit,skip,sort,user_id,timeline_type}]

+ Parameters

    + include_count: true (boolean, required)
    + limit: 25 (number, required)
    + skip: 0 (number, required)
    + sort: "created_at desc" (string, required)
    + user_id: "" (string, required) - User ID of user's events 
    + timeline_type: "messages" (string, required) - type of events 
        + notes 
        + conversations 
        + messages 
        + tags 
        + segments 
        + events 
        + mention 
        + conversations_and_messages 
        + tags_and_segments_and_events

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            
    + Body 
    
            {}
    
+ Response 200 (application/json)

            [
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "author_id": "5c60465aef96db00109429ef",
                    "user_id": "5da9ddb3a4ce2d0010ad6f53",
                    "created_at": "2020-03-25T15:27:54.386Z",
                    "id": "5e7b787a5562210020ebcc1c",
                    "event_type": "notes",
                    "event_action": "deleted"
                },
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "author_id": "5c60465aef96db00109429ef",
                    "user_id": "5da9ddb3a4ce2d0010ad6f53",
                    "created_at": "2020-03-25T15:15:57.557Z",
                    "id": "5e7b75ad5562210020ebcc1a",
                    "note": {
                        "body": null,
                        "is_company": false,
                        "model_id": "5da9ddb3a4ce2d0010ad6f53",
                        "app_id": "5c60465aef96db00109429f0",
                        "created_by": "5c60465aef96db00109429ef",
                        "body_html_safe": "<p>new note 2</p>",
                        "created_at": "2020-03-25T14:51:46.144Z",
                        "updated_at": "2020-03-25T15:15:57.549Z",
                        "updated_by": "5c60465aef96db00109429ef",
                        "id": "5e7b70025562210020ebcc17"
                    },
                    "event_type": "notes",
                    "event_action": "updated"
                },
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Admin collection [/admin]

## List all admins [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 
            
            {}

+ Response 200 (application/json)

        [
            {
                "app_id": "5c60465aef96db00109429f0",
                "admin_id": {
                    "email": "ktitorovk@gmail.com",
                    "phone": "+7 495 777-13-27",
                    "name": "Kostya",
                    "is_team": false,
                    "location_data": {
                        "city_name": "Solnechnogorsk",
                        "continent_code": "0",
                        "country_code": "RU",
                        "country_name": "RU",
                        "postal_code": null,
                        "region_code": null,
                        "region_name": "EU",
                        "timezone": "Europe/Moscow",
                        "latitude": 56.1833,
                        "longitude": 36.9833,
                        "timezone_offset": 10800
                    },
                    "social_accounts": [],
                    "app_ids": [
                        "5c60465aef96db00109429f0",
                        "5d7420cd9283e20020eb7ec6",
                        "5e5e822efd35e700111c8464",
                        "5e612037fd35e700111c8505"
                    ],
                    "is_super_admin": false,
                    "first_name": "Kostya",
                    "avatar": {
                        "color": "d76966",
                        "image_urls": {
                            "square_25": "https://amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_25.png?1537282240147",
                            "square_50": "https://amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_50.png?1537282240146",
                            "square_128": "https://amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
                        },
                        "image_url": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
                    },
                    "created_at": "2019-02-10T15:42:18.159Z",
                    "updated_at": "2020-03-02T14:58:58.462Z",
                    "app_id": "5c60465aef96db00109429f0",
                    "ip": "::ffff:185.233.194.131",
                    "pending_email_change": null,
                    "id": "5c60465aef96db00109429ef"
                },
                "last_active_at": null,
                "is_away": false,
                "visible_segment_ids": [
                    "5c60465aef96db00109429f6",
                    "5c60465aef96db00109429fd",
                    "5c60465aef96db00109429f8",
                    {
                        "app_id": "5c60465aef96db00109429f0",
                        "is_company": false,
                        "name": "All Users",
                        "predicates": [
                            {
                                "type": "string",
                                "attribute": "role",
                                "comparison": "eq",
                                "value": "user"
                            }
                        ],
                        "is_editable": false,
                        "always_visible": true,
                        "count": 0,
                        "created_by_id": null,
                        "created_at": "2019-02-10T15:42:18.188Z",
                        "id": "5c60465aef96db00109429f6"
                    },
                    "5cee72af993ff0001032aa0d",
                    "5c60465aef96db00109429fc",
                    "5e6b73e5cc0e570011093518"
                ],
                "visible_user_columns": [
                    "phone",
                    "user_id"
                ],
                "visible_company_columns": [
                    "name"
                ],
                "permissions": {
                    "active": true,
                    "can_send_messages": true,
                    "can_export_data": true,
                    "can_reassign_conversations": true,
                    "can_delete_messages": true,
                    "can_delete_users": true,
                    "can_access_settings_and_billing": true,
                    "role": "full_access",
                    "description": "Full Access",
                    "descriptions": [
                        "Full access"
                    ],
                    "sender_id": null,
                    "invite_token": null
                },
                "notification_settings": {
                    "email_for_mentions": true,
                    "browser_alert_setting": true,
                    "browser_audio_alerts": true,
                    "daily_summary_email_for": "users",
                    "email_for_all_conversations": true,
                    "email_for_activity_started_from_messages_sent": true,
                    "web_push_for_assigned_to_me": null,
                    "daily_summary_email_enabled": null,
                    "daily_summary_new_companies_list": false,
                    "daily_summary_new_user_list": false
                },
                "created_at": "2019-02-10T15:42:18.159Z",
                "role": "Founder / CEO",
                "visible_tag_ids": [
                    "5d1228d88100ad001072e3ea"
                ],
                "email_address_for_app_verification_status": null,
                "id": "5c60465aef96db00109429ef",
                "admin_email": "kostya-captivatenewnew@cap-mail-dev.letscaptivate.com",
                "is_app_owner": true,
                "email": "ktitorovk@gmail.com",
                "phone": "+7 495 777-13-27",
                "name": "Kostya",
                "password": "$2a$10$HeXYjcr8kaLEeUPMmY4F.O1JnvOxanSvnRVDZFFwpYFiCQggeLIzC",
                "is_team": false,
                "location_data": {
                    "city_name": "Solnechnogorsk",
                    "continent_code": "0",
                    "country_code": "RU",
                    "country_name": "RU",
                    "postal_code": null,
                    "region_code": null,
                    "region_name": "EU",
                    "timezone": "Europe/Moscow",
                    "latitude": 56.1833,
                    "longitude": 36.9833,
                    "timezone_offset": 10800
                },
                "social_accounts": [],
                "app_ids": [
                    "5c60465aef96db00109429f0",
                    "5d7420cd9283e20020eb7ec6"
                ],
                "is_super_admin": false,
                "first_name": "Kostya",
                "slug": "23452345",
                "avatar": {
                    "color": "d76966",
                    "image_urls": {
                        "square_25": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_25.png?1537282240147",
                        "square_50": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_50.png?1537282240146",
                        "square_128": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
                    },
                    "image_url": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
                },
                "updated_at": "2020-03-02T14:58:58.462Z",
                "ip": "::ffff:185.233.194.131",
                "reset_password_token": null,
                "pending_email_change": null,
                "pending_email_change_token": null,
                "is_me": true,
                "is_admin": true
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Get current admin [GET /me]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "last_active_at": null,
            "is_away": false,
            "visible_segment_ids": [
                "5c60465aef96db00109429f6",
                "5c60465aef96db00109429f8",
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "is_company": false,
                    "name": "All Users",
                    "predicates": [
                        {
                            "type": "string",
                            "attribute": "role",
                            "comparison": "eq",
                            "value": "user"
                        }
                    ],
                    "is_editable": false,
                    "always_visible": true,
                    "count": 0,
                    "created_by_id": null,
                    "created_at": "2019-02-10T15:42:18.188Z",
                    "id": "5c60465aef96db00109429f6"
                },
                "5e6b73e5cc0e570011093518"
            ],
            "visible_user_columns": [
                "phone",
                "user_id"
            ],
            "visible_company_columns": [
                "name"
            ],
            "created_at": "2019-02-10T15:42:18.159Z",
            "role": "Founder / CEO",
            "visible_tag_ids": [
                "5d1228d88100ad001072e3ea"
            ],
            "email_address_for_app_verification_status": null,
            "id": "5c60465aef96db00109429ef",
            "unread_conversations": 0,
            "email": "ktitorovk@gmail.com",
            "name": "Kostya",
            "location_data": {
                "city_name": "Solnechnogorsk",
                "country_name": "RU",
                "timezone": "Europe/Moscow",
                "latitude": 56.1833,
                "longitude": 36.9833
            },
            "social_accounts": [],
            "avatar": {
                "color": "d76966",
                "image_urls": {
                    "square_25": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_25.png?1537282240147",
                    "square_50": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_50.png?1537282240146",
                    "square_128": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
                },
                "image_url": "https://site-backup-w.s3.amazonaws.com/mnh/avatars/avatar_56be6602d18189818ecfd22a_128.png?1537282240194"
            },
            "pending_email_change": null,
            "apps": [
                {
                    "creator_id": "5c60465aef96db00109429ef",
                    "plan_id": null,
                    "name": "Captivate New NEw",
                    "url": "dsfv",
                    "message_from_email": "service",
                    "widget_is_installed": false,
                    "stripe_customer_id": null,
                    "general_settings": {
                        "time_zone_name": "(UTC+06:00) Dhaka",
                        "force_2fa": false,
                        "should_gather_social_data": false,
                        "companies_enabled": true,
                        "uses_test_app": false,
                        "customer_has_active_subscription": false,
                        "authorized_sign_in_methods": [
                            "email_password",
                            "email_password_otp",
                            "google_oauth2"
                        ],
                        "can_enable_enforce_sso": false
                    },
                    "payment_info": {
                        "plan_type": null,
                        "subscription_id": null,
                        "payment_expire_at": null,
                        "card": {}
                    },
                    "permissions": [],
                    "domains": [
                        {
                            "domain": "gmail.com",
                            "is_verified": false,
                            "confirmed": false,
                            "use_as_inbound": false
                        }
                    ],
                    "id": "5c60465aef96db00109429f0",
                    "service_outbound_domain": "cap-mail-dev.letscaptivate.com"
                },
            ],
            "app_permissions": [
                {
                    "active": true,
                    "can_send_messages": true,
                    "can_export_data": true,
                    "can_reassign_conversations": true,
                    "can_delete_messages": true,
                    "can_delete_users": true,
                    "can_access_settings_and_billing": true,
                    "role": "full_access",
                    "description": "Full Access",
                    "descriptions": [
                        "Full access"
                    ],
                    "sender_id": null,
                    "invite_token": null,
                    "app_id": "5c60465aef96db00109429f0",
                    "admin_id": "5c60465aef96db00109429ef"
                }
            ],
            "browser_alert_setting": true,
            "browser_audio_alerts": true,
            "is_me": true,
            "is_admin": true,
            "current_app_id": "5c60465aef96db00109429f0",
            "snippets": {
                "visitor": {
                    "snippet": "<script\n\r  defer\n\r  type=\"text/javascript\"\n\r  charset=\"UTF-8\"\n\r  src=\"http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/captivate_1.1.0.min.js\"\n\r></script>\n\r\n\r<script>\n\r  window.CaptivateAutoload = true;\n\r  window.CaptivateSettings = {\n\r    app_id: \"5c60465aef96db00109429f0\"\n\r  };\n\r</script>",
                    "id": "visitor"
                },
                "user": {
                    "snippet": "<script\n\r  defer\n\r  type=\"text/javascript\"\n\r  charset=\"UTF-8\"\n\r  src=\"http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/captivate_1.1.0.min.js\"\n\r></script>\n\r\n\r<script>\n\r  window.CaptivateAutoload = true;\n\r  window.CaptivateSettings = {\n\r    app_id: \"5c60465aef96db00109429f0\"\n\r    name: \"User name\", // Full name\n\r    email: \"email@domain.com\", // Email address\n\r    created_at: 1500000000, // Signup date as Unix ts\n\r  };\n\r</script>",
                    "id": "user"
                }
            }
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Get notification settings [GET /admin/notification_settings]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id
            
    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "email_for_mentions": true,
            "browser_alert_setting": true,
            "browser_audio_alerts": true,
            "daily_summary_email_for": "users",
            "email_for_all_conversations": true,
            "email_for_activity_started_from_messages_sent": true,
            "web_push_for_assigned_to_me": null,
            "daily_summary_email_enabled": null,
            "daily_summary_new_companies_list": false,
            "daily_summary_new_user_list": false
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "not found settings"
        }

## Update notification settings [POST /admin/notification_settings]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "email_for_all_conversations": true,
                "email_for_mentions": true,
                "email_for_activity_started_from_messages_sent": true,
                "email_for_owned_users": null,
                "daily_summary_email_for": true,
                "browser_alert_setting": true,
                "browser_audio_alerts": true
            }

+ Response 200 (application/json)

        {
            "email_for_all_conversations": true,
            "email_for_mentions": true,
            "email_for_activity_started_from_messages_sent": true,
            "email_for_owned_users": null,
            "daily_summary_email_for": "companies",
            "browser_alert_setting": true,
            "browser_audio_alerts": true,
            "web_push_for_assigned_to_me": null,
            "daily_summary_email_enabled": null,
            "daily_summary_new_companies_list": null,
            "daily_summary_new_user_list": null
        }

+ Response 400 (application/json)

        {
            "message": "not updated settings"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update admin [PUT /admin/{id}]

+ Parameters

    + id (string,required) - Admin id

+ Request

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body

            {
                "name": "Kostya Name",
                "job_title": "Title",
                "email": "ktitorovk@gmail.com",
                "biography": "Introduction"
                "assign_conversations_on_reply": true,
                "is_away": false,
                "email_address_for_app": "email@mail.ru"
            }

+ Response 200 (application/json)

        {
            "name": "Kostya Name",
            "job_title": "Title",
            "biography": "Introduction",
            "is_away": false
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Delete Admin from app [DELETE /admin{?id,reassign_auto_messages_admin_id,reassign_replies_admin_id}]

+ Parameters

    + id (string, required) - Admin id
    + reassign_auto_messages_admin_id (string, required) - new Admin ID for reassign auto messages
    + reassign_replies_admin_id (string, required) - new Admin ID for reassign replies

+ Request (application/json)
    
    + Headers
        
            x-Token: valid_access_token
            x-App: App_id

    + Body
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Unable to reassign auto messages to admin which does not exist"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "admin not found",
            "error_type": "not_found"
        }

## Update visible tags [POST /admin/update_visible_tags]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "tag_ids": [ // List ID of visible tags
                            "569d36d20691ee79dd000591",
                            "569d36d20691ee79dd000592"
                           ]
            }     

+ Response 200 (application/json)

        {
            "admin_id": "5c60465aef96db00109429ef",
            "app_id": "5c60465aef96db00109429f0",
            "last_active_at": null,
            "is_away": false,
            "visible_segment_ids": [
                "5c60465aef96db00109429f6",
                "5c60465aef96db00109429fd",
                "5c60465aef96db00109429f8",
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "is_company": false,
                    "name": "All Users",
                    "predicates": [
                        {
                            "type": "string",
                            "attribute": "role",
                            "comparison": "eq",
                            "value": "user"
                        }
                    ],
                    "is_editable": false,
                    "always_visible": true,
                    "count": 0,
                    "created_by_id": null,
                    "created_at": "2019-02-10T15:42:18.188Z",
                    "id": "5c60465aef96db00109429f6"
                },
                "5e6b73e5cc0e570011093518"
            ],
            "visible_user_columns": [
                "phone",
                "user_id"
            ],
            "visible_company_columns": [
                "name"
            ],
            "permissions": {
            "active": true,
            "can_send_messages": true,
            "can_export_data": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_delete_users": true,
            "can_access_settings_and_billing": true,
            "role": "full_access",
            "description": "Full Access",
                "descriptions": [
                    "Full access"
                ],
                "sender_id": null,
                "invite_token": null
            },
            "notification_settings": {
                "email_for_all_conversations": true,
                "email_for_mentions": true,
                "email_for_activity_started_from_messages_sent": true,
                "email_for_owned_users": true,
                "daily_summary_email_for": "companies",
                "browser_alert_setting": false,
                "browser_audio_alerts": false,
                "web_push_for_assigned_to_me": null,
                "daily_summary_email_enabled": null,
                "daily_summary_new_companies_list": null,
                "daily_summary_new_user_list": null
            },
            "created_at": "2019-02-10T15:42:18.175Z",
            "role": "Founder / CEO",
            "visible_tag_ids": [
                "5d1228d88100ad001072e3ea",
                "5e6a352cbfe61a00114a9a6c",
                "5e7627930128b50011e9685a",
                "5e762cf40128b50011e9685c"
            ],
            "email_address_for_app_verification_status": null,
            "biography": "Introduction",
            "job_title": "Title",
            "id": "5c60465aef96db00109429f1"
        }

+ Response 400 (application/json)

        {
            "raw_message": "tag_ids should be an array",
            "attr": "tag_ids",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update visible segments [POST /admin/update_visible_segments]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "segment_ids": [
                                "569d36d20691ee79dd000591",
                                "569d36d20691ee79dd000592"
                               ]
            } 

+ Response 200 (application/json)

        {
            "admin_id": "5c60465aef96db00109429ef",
            "app_id": "5c60465aef96db00109429f0",
            "last_active_at": null,
            "is_away": false,
            "visible_segment_ids": [
                "5c60465aef96db00109429f6",
                "5c60465aef96db00109429fd",
                "5c60465aef96db00109429f8",
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "is_company": false,
                    "name": "All Users",
                    "predicates": [
                        {
                            "type": "string",
                            "attribute": "role",
                            "comparison": "eq",
                            "value": "user"
                        }
                    ],
                    "is_editable": false,
                    "always_visible": true,
                    "count": 0,
                    "created_by_id": null,
                    "created_at": "2019-02-10T15:42:18.188Z",
                    "id": "5c60465aef96db00109429f6"
                },
                "5e6b73e5cc0e570011093518"
            ],
            "visible_user_columns": [
                "phone",
                "user_id"
            ],
            "visible_company_columns": [
                "name"
            ],
            "permissions": {
            "active": true,
            "can_send_messages": true,
            "can_export_data": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_delete_users": true,
            "can_access_settings_and_billing": true,
            "role": "full_access",
            "description": "Full Access",
                "descriptions": [
                    "Full access"
                ],
                "sender_id": null,
                "invite_token": null
            },
            "notification_settings": {
                "email_for_all_conversations": true,
                "email_for_mentions": true,
                "email_for_activity_started_from_messages_sent": true,
                "email_for_owned_users": true,
                "daily_summary_email_for": "companies",
                "browser_alert_setting": false,
                "browser_audio_alerts": false,
                "web_push_for_assigned_to_me": null,
                "daily_summary_email_enabled": null,
                "daily_summary_new_companies_list": null,
                "daily_summary_new_user_list": null
            },
            "created_at": "2019-02-10T15:42:18.175Z",
            "role": "Founder / CEO",
            "visible_tag_ids": [
                "5d1228d88100ad001072e3ea",
                "5e6a352cbfe61a00114a9a6c",
                "5e7627930128b50011e9685a",
                "5e762cf40128b50011e9685c"
            ],
            "email_address_for_app_verification_status": null,
            "biography": "Introduction",
            "job_title": "Title",
            "id": "5c60465aef96db00109429f1"
        }

+ Response 400 (application/json)

        {
            "raw_message": "segment_ids should be an array",
            "attr": "segment_ids",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update visible user columns [POST /admin/update_user_columns]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "user_columns": [
                                "name",
                                "custom_data.birthday"
                                ]
            }

+ Response 200 (application/json)

        {
            "admin_id": "5c60465aef96db00109429ef",
            "app_id": "5c60465aef96db00109429f0",
            "last_active_at": null,
            "is_away": false,
            "visible_segment_ids": [
                "5c60465aef96db00109429f6",
                "5c60465aef96db00109429fd",
                "5c60465aef96db00109429f8",
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "is_company": false,
                    "name": "All Users",
                    "predicates": [
                        {
                            "type": "string",
                            "attribute": "role",
                            "comparison": "eq",
                            "value": "user"
                        }
                    ],
                    "is_editable": false,
                    "always_visible": true,
                    "count": 0,
                    "created_by_id": null,
                    "created_at": "2019-02-10T15:42:18.188Z",
                    "id": "5c60465aef96db00109429f6"
                },
                "5e6b73e5cc0e570011093518"
            ],
            "visible_user_columns": [
                "phone",
                "user_id"
            ],
            "visible_company_columns": [
                "name"
            ],
            "permissions": {
            "active": true,
            "can_send_messages": true,
            "can_export_data": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_delete_users": true,
            "can_access_settings_and_billing": true,
            "role": "full_access",
            "description": "Full Access",
                "descriptions": [
                    "Full access"
                ],
                "sender_id": null,
                "invite_token": null
            },
            "notification_settings": {
                "email_for_all_conversations": true,
                "email_for_mentions": true,
                "email_for_activity_started_from_messages_sent": true,
                "email_for_owned_users": true,
                "daily_summary_email_for": "companies",
                "browser_alert_setting": false,
                "browser_audio_alerts": false,
                "web_push_for_assigned_to_me": null,
                "daily_summary_email_enabled": null,
                "daily_summary_new_companies_list": null,
                "daily_summary_new_user_list": null
            },
            "created_at": "2019-02-10T15:42:18.175Z",
            "role": "Founder / CEO",
            "visible_tag_ids": [
                "5d1228d88100ad001072e3ea",
                "5e6a352cbfe61a00114a9a6c",
                "5e7627930128b50011e9685a",
                "5e762cf40128b50011e9685c"
            ],
            "email_address_for_app_verification_status": null,
            "biography": "Introduction",
            "job_title": "Title",
            "id": "5c60465aef96db00109429f1"
        }

+ Response 400 (application/json)

        {
            "error_type": "invalid_request",
            "raw_message": "user_columns should be an array",
            "attr": "user_columns",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update visible company columns [POST /admin/update_company_columns]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "company_columns": [
                                "name",
                                "custom_data.birthday"
                                ]
            }

+ Response 200 (application/json)

        {
            "admin_id": "5c60465aef96db00109429ef",
            "app_id": "5c60465aef96db00109429f0",
            "last_active_at": null,
            "is_away": false,
            "visible_segment_ids": [
                "5c60465aef96db00109429f6",
                "5c60465aef96db00109429fd",
                "5c60465aef96db00109429f8",
                {
                    "app_id": "5c60465aef96db00109429f0",
                    "is_company": false,
                    "name": "All Users",
                    "predicates": [
                        {
                            "type": "string",
                            "attribute": "role",
                            "comparison": "eq",
                            "value": "user"
                        }
                    ],
                    "is_editable": false,
                    "always_visible": true,
                    "count": 0,
                    "created_by_id": null,
                    "created_at": "2019-02-10T15:42:18.188Z",
                    "id": "5c60465aef96db00109429f6"
                },
                "5e6b73e5cc0e570011093518"
            ],
            "visible_user_columns": [
                "phone",
                "user_id"
            ],
            "visible_company_columns": [
                "name"
            ],
            "permissions": {
            "active": true,
            "can_send_messages": true,
            "can_export_data": true,
            "can_reassign_conversations": true,
            "can_delete_messages": true,
            "can_delete_users": true,
            "can_access_settings_and_billing": true,
            "role": "full_access",
            "description": "Full Access",
                "descriptions": [
                    "Full access"
                ],
                "sender_id": null,
                "invite_token": null
            },
            "notification_settings": {
                "email_for_all_conversations": true,
                "email_for_mentions": true,
                "email_for_activity_started_from_messages_sent": true,
                "email_for_owned_users": true,
                "daily_summary_email_for": "companies",
                "browser_alert_setting": false,
                "browser_audio_alerts": false,
                "web_push_for_assigned_to_me": null,
                "daily_summary_email_enabled": null,
                "daily_summary_new_companies_list": null,
                "daily_summary_new_user_list": null
            },
            "created_at": "2019-02-10T15:42:18.175Z",
            "role": "Founder / CEO",
            "visible_tag_ids": [
                "5d1228d88100ad001072e3ea",
                "5e6a352cbfe61a00114a9a6c",
                "5e7627930128b50011e9685a",
                "5e762cf40128b50011e9685c"
            ],
            "email_address_for_app_verification_status": null,
            "biography": "Introduction",
            "job_title": "Title",
            "id": "5c60465aef96db00109429f1"
        }

+ Response 400 (application/json)

        {
            "error_type": "invalid_request",
            "raw_message": "company_columns should be an array",
            "attr": "company_columns",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Update profile [POST /admin/profile]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: App_id

    + Body 

            {
                "job_title": "Developer",
                "biography": ""
            }

+ Response 200 (application/json)

        {
            "job_title": "Developer",
            "biography": ""
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Change password [POST /admin/change_password]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 

            {
                "current_password": "current_password",
                "password": "new_password",
                "password_confirmation": "new_password"
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "wrong password",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Change email [POST /admin/change_email]

+ Request

    + Headers  
    
            x-Token: valid_access_token

    + Body 

            {
                "email": "new@email.com"
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "raw_message": "email is required",
            "attr": "email",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Resend verification email [POST /admin/resend_verification_email]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token

    + Body 
            
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "No email for changing",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Cancel verification email [POST /admin/cancel_verification_email]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token

    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Confirm verification email [POST /admin/confirm_verification_email/{token}]

+ Parameters

    + token (string, required) - Token for confirmation

+ Request (application/json)
    
        {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "raw_message": "token is required",
            "attr": "token",
            "rule": "required",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

## Init admin socket /Socket/ [GET /admin/socket_init]
Need update


+ Request

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {}

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                status: "ok"
            }

## Send notification event /Socket/ [POST /admin/admin_event]
Need update

+ Request

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                eventName: "AdminIsTyping",
                eventData: {
                            conversationId: "12345",
                            toUser: "777" 
                           }
            } 

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                status: "ok"
            }      

## Upload avatar [POST /admin/upload_avatar]

+ Request

    + Headers  
    
            Content-Type: multipart/form-data; boundary=---BOUNDARY
            x-Token: valid_access_token
            
    + Body 
            
            -----BOUNDARY
            Content-Disposition: form-data; name="image"; filename="SomeImage.jpg"
            Content-Type: image/jpeg
            Content-Transfer-Encoding: base64
            /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
            HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
            MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
            AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
            AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
            -----BOUNDARY

+ Response 200 (application/json)

        {
            "status": "ok",
            "details": [
                {
                    "square": "square_25",
                    "url": "https://w-media-testing.s3.amazonaws.com/avatars/avatar_5c60465aef96db00109429ef_25.png?1586267080207"
                },
                {
                    "square": "square_50",
                    "url": "https://w-media-testing.s3.amazonaws.com/avatars/avatar_5c60465aef96db00109429ef_50.png?1586267080212"
                },
                {
                    "square": "square_128",
                    "url": "https://w-media-testing.s3.amazonaws.com/avatars/avatar_5c60465aef96db00109429ef_128.png?1586267080254"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Not found admin",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Destroy avatar [POST /admin/destroy_avatar]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Send email to verify email address for app [POST /admin/email_address_for_app_send_verification_email]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Confirm verification email address for app [POST /admin/email_address_for_app_confirm/{token}]

+ Parameters

    + token (string, required) - Token for confirmation

+ Request (application/json)
    
        {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "raw_message": "token is required",
            "attr": "token",
            "rule": "required",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

# Team collection [/team]

## List all teams [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {} 

+ Response 200 (application/json)

            [
                {
                    "app_id": "5d7420cd9283e20020eb7ec6",
                    "is_team": true,
                    "avatar_emoji": "😍",
                    "member_ids": [
                        "5c857b90fe8bcb00108f1653",
                        "5e26ca9aea74ce00119dddbe",
                        "5e4548a07ef644001190855f"
                    ],
                    "name": "Marketing",
                    "id": "5e491b246f1c09001ee47371",
                    "app_ids": [
                        "5d7420cd9283e20020eb7ec6"
                    ],
                    "created_at": "2020-02-16T10:36:20.404Z",
                    "updated_at": "2020-02-16T10:36:20.404Z"
                },
                {
                    "app_id": "5d7420cd9283e20020eb7ec6",
                    "is_team": true,
                    "avatar_emoji": "🏢",
                    "member_ids": [],
                    "name": "Finance Team",
                    "id": "5e8d91f8cb67ae00113e11e7",
                    "app_ids": [
                        "5d7420cd9283e20020eb7ec6"
                    ],
                    "created_at": "2020-04-08T08:57:28.241Z",
                    "updated_at": "2020-04-08T12:23:37.866Z"
                }
            ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Create new team [POST]

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: app_id
    
    + Body

            {
                "avatar_emoji": "🏢",
                "member_ids": null,
                "members": null,
                "name": "New team",
                "app_id": null,
                "app_ids": null,
                "created_at": null,
                "id": null,
                "is_team": null,
                "updated_at": null,
                "reassignAutoMessagesAdminId": "",
                "reassignRepliesAdminId": ""
            }

+ Response 201 (application/json)

        {
            "is_team": true,
            "avatar_emoji": "🏢",
            "member_ids": [],
            "name": "New team",
            "app_id": "5d7420cd9283e20020eb7ec6",
            "id": "5e8de41acc77e600117c4a47",
            "app_ids": [
                "5d7420cd9283e20020eb7ec6"
            ],
            "created_at": "2020-04-08T14:47:54.919Z",
            "updated_at": "2020-04-08T14:47:54.919Z"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "Team with name 'New team' already exists",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Edit team [POST /team/{id}]

+ Parameters

    + id (string, required) - Team Id

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: app_id
    
    + Body

            {
                "avatar_emoji": "🏢",
                "member_ids": [],
                "members": [],
                "name": "New team 1",
                "app_id": "5d7420cd9283e20020eb7ec6",
                "app_ids": [
                    "5d7420cd9283e20020eb7ec6"
                ],
                "created_at": "2020-04-08T14:47:54.919Z",
                "id": "5e8de41acc77e600117c4a47",
                "is_team": true,
                "updated_at": "2020-04-08T14:47:54.919Z",
                "reassignAutoMessagesAdminId": "",
                "reassignRepliesAdminId": ""
            }

+ Response 200 (application/json)

        {
            "app_id": "5d7420cd9283e20020eb7ec6",
            "is_team": true,
            "avatar_emoji": "🏢",
            "member_ids": [],
            "name": "New team 1",
            "id": "5e8de41acc77e600117c4a47",
            "app_ids": [
                "5d7420cd9283e20020eb7ec6"
            ],
            "created_at": "2020-04-08T14:47:54.919Z",
            "updated_at": "2020-04-08T14:58:45.023Z"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Delete team [DELETE /team/{id,reassign_auto_messages_admin_id,reassign_replies_admin_id}]

+ Parameters

    + id (string, required) - Team ID
    + reassign_auto_messages_admin_id (string, required) - new ID for reassign auto message
    + reassign_replies_admin_id (string, required) - new ID for reassign replies

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: app_id
    
    + Body
  
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not found",
            "error_type": "not_found"
        }

## Add team member [PUT /team/{id}/add_member]

+ Parameters 

    + id (string) - Team id 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id

    + Body 

            {
                "admin": "admin id" 
            }

+ Response 200 (application/json)

        {
            "app_id": "5d7420cd9283e20020eb7ec6",
            "is_team": true,
            "avatar_emoji": "🏢",
            "member_ids": [
                "5c60465aef96db00109429ef"
            ],
            "name": "new team",
            "id": "5e8dee2bcc77e600117c4a4e",
            "app_ids": [
                "5d7420cd9283e20020eb7ec6"
            ],
            "created_at": "2020-04-08T15:30:51.803Z",
            "updated_at": "2020-04-08T15:30:51.803Z"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found team",
            "error_type": "not_found"
        }

## Remove member [PUT /team/{id}/remove_member]

+ Parameters 

    + id (string, required) - Team id 

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id

    + Body 

            {
                "admin": "admin id" 
            }

+ Response 200 (application/json)

        {
            "app_id": "5d7420cd9283e20020eb7ec6",
            "is_team": true,
            "avatar_emoji": "🏢",
            "member_ids": [],
            "name": "new team",
            "id": "5e8dee2bcc77e600117c4a4e",
            "app_ids": [
                "5d7420cd9283e20020eb7ec6"
            ],
            "created_at": "2020-04-08T15:30:51.803Z",
            "updated_at": "2020-04-08T15:30:51.803Z"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Forbidden to remove from default team"
        }

+ Response 404 (application/json)

        {
            "message": "Not Found",
            "raw_message": "Not found team",
            "error_type": "not_found"
        }

# Message folders collection [/messagefolder]
Using standart API from framework

## List all folders [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        [
            {
                "id": "57d098db0066614020c97e51",
                "name": "Some Folder",
                "app_id": "570e167e60e3dac89655a11d",
                "created_by": "570e173660e3dac89655a11e",
                "created_at": "2016-09-07T22:46:51.519Z"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Add folder [POST]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 

            {
                "name": "Some Folder"
            }

+ Response 201 (application/json)

        {
            "name": "Some Folder",
            "app_id": "5c60465aef96db00109429f0",
            "created_by": "5c60465aef96db00109429ef",
            "created_at": "2020-04-08T16:14:34.597Z",
            "id": "5e8df86acc77e600117c4a59"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "1 attribute is invalid",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Auto/Manual Messages collection [/newmessage]

## List messages [GET /newmessage{?include_count,limit,skip,sort,message_type,user_role}]

+ Parameters 

    + include_count: true (beeloan, required)
    + limit: 25 (number, required)
    + skip: 0 (number, required)
    + sort: "went_live_at%20desc" (string,required)
    + message_type: "manual" (string,required)
        + manual
        + auto
    + user_role: "user" (string,required)
        + visitor
        + lead
        + user

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        [
            {
                "app_id": "5d7420cd9283e20020eb7ec6",
                "campaign_id": null,
                "message_folder_id": null,
                "state": "live",
                "delivery_window": null,
                "display_until": null,
                "message_goal": {
                    "predicates": [],
                    "attribute_identifier": null,
                    "desired_change": null
                },
                "message_type": "auto",
                "selection_state": {
                    "predicates": [
                        {
                            "attribute": "role",
                            "comparison": "eq",
                            "type": "string",
                            "value": "visitor",
                            "operator": "and",
                            "sub_attribute": null,
                            "group": null
                        }
                    ],
                    "included_ids": null,
                    "excluded_ids": null
                },
                "target_match": null,
                "target_type": null,
                "type": "in-app",
                "user_role": "visitor",
                "variations": [
                    {
                        "json_blocks": [
                            {
                                "type": "paragraph",
                                "align": "left",
                                "text": "test"
                            }
                        ],
                        "delivery_option": "full",
                        "email_template_id": "personal",
                        "reply_type": "text",
                        "style": "chat",
                        "assign_to_id": "5c8a8e130533010010f1cb7f",
                        "from_id": "5c8a8e130533010010f1cb7f",
                        "created_at": "2020-04-07T10:50:26.850Z",
                        "from_address_id": null,
                        "reply_to_address_id": null,
                        "stopped_at": null,
                        "subject": "(no subject)",
                        "went_live_at": "2020-04-07T10:50:27.035Z",
                        "push_only_uris": null,
                        "state": "live",
                        "stats": {
                            "sent_count": 0,
                            "open_count": 0,
                            "open_count_total": 0,
                            "reply_count": 0,
                            "response_count": 0,
                            "click_count": 0,
                            "click_count_total": 0,
                            "unsubscribe_count": 0,
                            "bounce_count": 0,
                            "goal_count": 0,
                            "spam_count": 0,
                            "reaction_1": 0,
                            "reaction_2": 0,
                            "reaction_3": 0,
                            "link_clicks": []
                        }
                    }
                ],
                "title": "test",
                "scheduled_at": null,
                "display_until_timezone": null,
                "delivery_channel": null,
                "campaign_sort_order": null,
                "show_unsubscribe_link": null,
                "reply_disabled": null,
                "went_live_at": "2020-04-07T10:50:27.034Z",
                "id": "5e8c5af2f601fb001120c43d"
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Create new message [POST]

+ Request (application/json)

    + Headers
        
            x-Token: valid_access_token
            x-App: app_id

    + Body

            {
                "state": "draft",
                "delivery_window": null,
                "display_until": null,
                "message_goal": {
                    "predicates": []
                },
                "message_type": "manual",
                "selection_state": {
                    "predicates": [
                        {
                            "attribute": "role", 
                            "comparison": "eq", 
                            "type": "string", 
                            "value": "user", 
                            "operator": "and",
                            "attributeTitle": "User Type",
                            "attributeDescription": "",
                            "iconClass": "users",
                            "isDisabled": true,
                            "hyper_type": "string",
                            "id": "5aacfffc47e952210d5806ec"
                        }
                    ]
                },
                "target_match": null,
                "target_type": null,
                "type": "email",
                "user_role": "user",
                "variations": [
                    {
                        "json_blocks": [
                            {
                                "type": "paragraph", 
                                "align": "left", 
                                "text": "test"
                            }
                        ],
                        "delivery_option": "full",
                        "email_template_id": "personal",
                        "reply_type": "text",
                        "state": "draft",
                        "style": "chat",
                        "assign_to_id": "5c60465aef96db00109429ef",
                        "from_id": "5c60465aef96db00109429ef",
                        "subject": "email"
                    }
                ],
                "title": "new message",
                "scheduled_at": null,
                "scheduled_at_timezone": null,
                "display_until_timezone": null
            }

+ Response 201 (application/json)

        {
            "state": "draft",
            "delivery_window": null,
            "display_until": null,
            "message_goal": {
                "predicates": [],
                "attribute_identifier": null,
                "desired_change": null
            },
            "message_type": "manual",
            "selection_state": {
                "predicates": [
                    {
                        "attribute": "role",
                        "comparison": "eq",
                        "type": "string",
                        "value": "user",
                        "operator": "and",
                        "sub_attribute": null,
                        "group": null
                    }
                ],
                "included_ids": null,
                "excluded_ids": null
            },
            "target_match": null,
            "target_type": null,
            "type": "email",
            "user_role": "user",
            "variations": [
                {
                    "json_blocks": [
                        {
                            "type": "paragraph",
                            "align": "left",
                            "text": "test"
                        }
                    ],
                    "delivery_option": "full",
                    "email_template_id": "personal",
                    "reply_type": "text",
                    "style": "chat",
                    "assign_to_id": "5c60465aef96db00109429ef",
                    "from_id": "5c60465aef96db00109429ef",
                    "subject": "email",
                    "created_at": "2020-04-09T09:04:32.590Z",
                    "from_address_id": null,
                    "reply_to_address_id": null,
                    "stopped_at": null,
                    "went_live_at": null,
                    "push_only_uris": null,
                    "state": "draft",
                    "stats": {
                        "sent_count": 0,
                        "open_count": 0,
                        "open_count_total": 0,
                        "reply_count": 0,
                        "response_count": 0,
                        "click_count": 0,
                        "click_count_total": 0,
                        "unsubscribe_count": 0,
                        "bounce_count": 0,
                        "goal_count": 0,
                        "spam_count": 0,
                        "reaction_1": 0,
                        "reaction_2": 0,
                        "reaction_3": 0,
                        "link_clicks": []
                    }
                }
            ],
            "title": "new message",
            "scheduled_at": null,
            "display_until_timezone": null,
            "app_id": "5d7420cd9283e20020eb7ec6",
            "delivery_channel": null,
            "campaign_id": null,
            "campaign_sort_order": null,
            "show_unsubscribe_link": null,
            "message_folder_id": null,
            "reply_disabled": null,
            "id": "5e8ee520cc77e600117c4a94"
        }

+ Response 400 (application/json)

        {
            "message": "Invalid request",
            "raw_message": "variations.0.from_id is required",
            "attribute": "variations.0.from_id",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Edit message [PUT /newmessage/{id}]

+ Parameters

    + id (string, required) - Message Id

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: app_id
    
    + Body

            {
                "app_id": "5d7420cd9283e20020eb7ec6",
                "campaign_id": null,
                "message_folder_id": null,
                "state": "draft",
                "delivery_window": null,
                "display_until": null,
                "message_goal": {
                    "predicates": [],
                    "attribute_identifier": null,
                    "desired_change": null
                },
                "message_type": "manual",
                "selection_state": {
                    "predicates": [
                        {attribute: "role", comparison: "eq", type: "string", value: "user", operator: "and",…}]
                            "attribute": "role",
                            "comparison": "eq",
                            "type": "string",
                            "value": "user",
                            "operator": "and",
                            "sub_attribute": null,
                            "group": null
                        }
                    ],
                    "included_ids": null,
                    "excluded_ids": null
                },
                "target_match": null,
                "target_type": null,
                "type": "email",
                "user_role": "user",
                "variations": [
                    {
                        "json_blocks": [
                            {
                                "type": "paragraph", 
                                "align": "left", 
                                "text": "test"
                            }
                        ],
                        "delivery_option": "full",
                        "email_template_id": "personal",
                        "reply_type": "text",
                        "style": "chat",
                        "assign_to_id": "5c60465aef96db00109429ef",
                        "from_id": "5c60465aef96db00109429ef",
                        "subject": "test 11",
                        "created_at": "2020-04-09T10:11:10.414Z",
                        "from_address_id": null,
                        "reply_to_address_id": null,
                        "stopped_at": null,
                        "went_live_at": null,
                        "push_only_uris": null,
                        "state": "draft",
                        "stats": {
                            "sent_count": 0, 
                            "open_count": 0, 
                            "open_count_total": 0, 
                            "reply_count": 0, 
                            "response_count": 0, 
                            "click_count": 0,
                            "click_count_total": 0,
                            "unsubscribe_count": 0,
                            "bounce_count": 0,
                            "goal_count": 0,
                            "spam_count": 0,
                            "reaction_1": 0,
                            "reaction_2": 0,
                            "reaction_3": 0,
                            "link_clicks": []
                        }
                    ],
                    "title": "new test message",
                    "scheduled_at": null,
                    "display_until_timezone": null,
                    "delivery_channel": null,
                    "campaign_sort_order": null,
                    "show_unsubscribe_link": null,
                    "reply_disabled": null,
                    "id": "5e8ef4be996d220011e155a1",
                    "scheduled_at_timezone": null
                }
            }

+ Response 200 (application/json)

        {
            "app_id": "5c60465aef96db00109429f0",
            "campaign_id": null,
            "message_folder_id": null,
            "state": "draft",
            "delivery_window": null,
            "display_until": null,
            "message_goal": {
                "predicates": [
                    {
                        "attribute": "role",
                        "comparison": "eq",
                        "type": "string",
                        "value": "user",
                        "operator": "and",
                        "sub_attribute": null,
                        "group": null
                    }
                ],
                "attribute_identifier": null,
                "desired_change": null
            },
            "message_type": "manual",
            "selection_state": {
                "predicates": [
                    {
                        "attribute": "role",
                        "comparison": "eq",
                        "type": "string",
                        "value": "user",
                        "operator": "and",
                        "sub_attribute": null,
                        "group": null
                    }
                ],
                "included_ids": null,
                "excluded_ids": null
            },
            "target_match": null,
            "target_type": null,
            "type": "email",
            "user_role": "user",
            "variations": [
                {
                    "json_blocks": [
                        {
                            "type": "paragraph",
                            "align": "left",
                            "text": "Text message"
                        }
                    ],
                    "delivery_option": "full",
                    "email_template_id": "personal",
                    "reply_type": "text",
                    "style": "chat",
                    "assign_to_id": "5c60465aef96db00109429ef",
                    "from_id": "5c60465aef96db00109429ef",
                    "subject": "Subjects",
                    "created_at": "2020-04-15T15:29:15.436Z",
                    "from_address_id": null,
                    "reply_to_address_id": null,
                    "stopped_at": null,
                    "went_live_at": null,
                    "push_only_uris": null,
                    "state": "draft",
                    "stats": {
                        "sent_count": 0,
                        "open_count": 0,
                        "open_count_total": 0,
                        "reply_count": 0,
                        "response_count": 0,
                        "click_count": 0,
                        "click_count_total": 0,
                        "unsubscribe_count": 0,
                        "bounce_count": 0,
                        "goal_count": 0,
                        "spam_count": 0,
                        "reaction_1": 0,
                        "reaction_2": 0,
                        "reaction_3": 0,
                        "link_clicks": []
                    }
                }
            ],
            "title": "New message",
            "scheduled_at": null,
            "display_until_timezone": null,
            "delivery_channel": null,
            "campaign_sort_order": null,
            "show_unsubscribe_link": null,
            "reply_disabled": null,
            "id": "5e97284b088af500118f70cf"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Delete message [DELETE /newmessage/{id}]
+ Parameters

    + id (string, required) - Message Id    

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Send manual message [POST /newmessage/{id}/send]

Allowed for admins with permission `can_send_messages`

+ Parameters

    + id (string, required) - Message Id    

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 400 (application/json)

        {
            "message": "Message state should not be live",
            "error_type": "invalid_request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Get counts [GET /newmessage/counts]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "manual": {
                "all": 191,
                "sent": 159,
                "draft": 31,
                "scheduled": 1
            },
            "auto": {
                "all": 9,
                "live": 8,
                "draft": 0,
                "stopped": 1,
                "scheduled": 0
            },
            "folders": {},
            "my": 3
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Get counts detailed [GET /newmessage/counts_detailed]

+ Request (application/json)

    + Headers  
    
            x-Token: valid_access_token
            x-App: app_id
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "manual": {
                "all": {
                    "user": 110,
                    "lead": 82
                },
                "sent": {
                    "user": 106,
                    "lead": 54
                },
                "draft": {
                    "user": 3,
                    "lead": 28
                },
                "scheduled": {
                    "user": 1,
                    "lead": 0
                }
            },
            "auto": {
                "all": {
                    "user": 6,
                    "lead": 2,
                    "visitor": 1
                },
                "live": {
                    "user": 5,
                    "lead": 2,
                    "visitor": 1
                },
                "draft": {
                    "user": 0,
                    "lead": 0,
                    "visitor": 0
                },
                "stopped": {
                    "user": 1,
                    "lead": 0,
                    "visitor": 0
                },
                "scheduled": {
                    "user": 0,
                    "lead": 0,
                    "visitor": 0
                }
            },
            "my": {
                "user": 3,
                "lead": 0,
                "visitor": 0
            }
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }

## Get counts by message type [GET /newmessage/counts_by_message_types{?state,message_type}]

+ Parameters

    + state: "draft" (string, required) - State message
        + live
        + draft
        + stopped
        + scheduled
    + message_type: "manual" (string, required) - Type message
        + manual
        + auto

+ Request (application/json)

    + Headers
    
            x-Token: valid_access_token
            x-App: app_id
    
    + Body
    
            {}

+ Response 200 (application/json)

        {
            "users": 0,
            "visitors": 0,
            "leads": 0
        }

+ Response 400 (application/json)

        {
            "raw_message": "state is required",
            "attr": "email",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

+ Response 403 (application/json)

        {
            "message": "Wrong application Id."
        }


## Get users [GET /newmessage/{id}/users{?action}]
API returns list of users, which targeted for specified message(`target_users`) and list of users, 
which already recieved that message(`users_for_specified_action`).

Can be used for example to understand if message can be paused or not by simply comparing length of 2 type of user's list from response

+ Parameters 

    + id (string, required) - Message ID

    + action (sting, required) - action: 
        + sent
        + opened
        + clicked
        + replied 
        + unsubscribed
        + bounced 
        + hit_goal

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 
    
            {}

+ Response 200 (application/json)

        {
            "target_users": [
                {
                    "app_id": "5d7420cd9283e20020eb7ec6",
                    "remote_created_at": "2020-03-23T12:44:16.177Z",
                    "role": "user",
                    "custom_data": {
                        "custom_field_1": "asfasdf",
                        "hobby": "collecting",
                        "custom_field_N": "dggidlsfgsdg"
                    },
                    "email": "anar.k.jafarov@gmail.com",
                    "user_id": "d463c154fd013d98fc2fd19f607ca6d6",
                    "acquired_at": null,
                    "company_ids": [],
                    "name": "Client Name",
                    "owner_name": null,
                    "pseudonym": null,
                    "display_as": "Client Name",
                    "phone": null,
                    "user_agent_data": {
                        "source": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
                        "name": "Chrome",
                        "version": "80.0.3987.149",
                        "engine": null,
                        "engine_version": null,
                        "os": "Mac OS 10.15.1",
                        "platform": "Mac OS",
                        "mobile": false
                    },
                    "last_heard_from_at": "2020-03-23T12:49:33.453Z",
                    "last_contacted_at": "2020-03-27T09:54:47.602Z",
                    "last_request_at": "2020-03-24T08:55:05.711Z",
                    "last_request_at_ios": null,
                    "last_session_lasted": 0,
                    "last_seen_ip": "::ffff:197.246.50.163",
                    "referral_url": null,
                    "session_count": 12,
                    "session_count_ios": null,
                    "social_accounts": {},
                    "tag_ids": [],
                    "segment_ids": [
                        "5d7420cd9283e20020eb7ed0",
                        "5d7420cd9283e20020eb7ed4"
                    ],
                    "unsubscribed_from_emails": null,
                    "ios_app_name": null,
                    "ios_app_version": null,
                    "ios_device": null,
                    "ios_os_version": null,
                    "android_app_name": null,
                    "android_app_version": null,
                    "android_device": null,
                    "android_os_version": null,
                    "browser_locale": "en-US",
                    "language_override": null,
                    "last_request_at_android": null,
                    "session_count_android": null,
                    "user_event_summaries": {},
                    "healthscore": null,
                    "last_visited_url": "http://c-static-testing.s3-website-us-east-1.amazonaws.com/widget/example.html?email=anar.k.jafarov@gmail.com",
                    "has_device_token": null,
                    "enabled_push_messaging": null,
                    "is_mobile_unidentified": null,
                    "marked_email_as_spam": null,
                    "has_hard_bounce": null,
                    "last_email_opened_at": null,
                    "last_email_clicked_at": null,
                    "utm_campaign": null,
                    "utm_content": null,
                    "utm_medium": null,
                    "utm_source": null,
                    "utm_term": null,
                    "geoip_data": {
                        "city_name": "Cairo",
                        "continent_code": "0",
                        "country_code": "EG",
                        "country_name": "EG",
                        "postal_code": null,
                        "region_code": null,
                        "region_name": "AF",
                        "timezone": "Africa/Cairo",
                        "latitude": 30.0771,
                        "longitude": 31.2859
                    },
                    "avatar": {
                        "initials": null,
                        "color": "#ad8098",
                        "image_urls": {
                            "mini": null,
                            "mini_x2": null,
                            "normal": null,
                            "normal_x2": null,
                            "large": null
                        },
                        "image_url": null
                    },
                    "user_time": {
                        "local_time": null,
                        "timezone": null,
                        "timezone_code": null,
                        "local_time_12h": null
                    },
                    "created_at": "2020-03-23T12:44:16.200Z",
                    "updated_at": "2020-03-27T09:54:47.604Z",
                    "id": "5e78af2046ad7c00110cc21a"
                }
            ],
            "users_for_specified_action": []
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Get messages stat [GET /newmessage/{id}/messages{?action,include_count,skip,variant}]

+ Parameters 

    + id (string, required) - message id 
    + action: "sent" (string, required) - action: 
        + sent
        + opened
        + clicked
        + replied
        + unsubscribed
        + bounced hit_goal
        + not_opened
        + not_clicked
        + not_replied
        + not_unsubscribed
        + not_bounced
        + not_hit_goal
    + variant: 0 (number,required) - A/B testing
        + 1
        + 0
    + skip: 0 (number, required) 
    + include_count: true (boolean, required)

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        [
            {
                "sent_at": "2020-04-11T17:45:58.177Z",
                "hit_goal_at": null,
                "user": {
                    "user_id": "349d258103dbddb4db7a284a40bcc8f3",
                    "name": null,
                    "avatar": {
                        "initials": null,
                        "color": "#ab734d",
                        "image_urls": {
                            "mini": null,
                            "mini_x2": null,
                            "normal": null,
                            "normal_x2": null,
                            "large": null
                        },
                        "image_url": null
                    },
                    "id": "5e92025697c91f00115fd782",
                    "display_as": ""
                }
            },
        ]

+ Response 400 (application/json)

        {
            "raw_message": "param `action` is required and should be `sent`, `opened`, `clicked`, `replied`, `unsubscribed`, `bounced`, `hit_goal`, `not_opened`, `not_clicked`, `not_replied`, `not_unsubscribed`, `not_bounced`, `not_hit_goal`",
            "attr": "action",
            "error_type": "invalid_request",
            "message": "Invalid request"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Start message [POST /newmessage/{id}/start]

Allowed for admins with permission `can_send_messages`

+ Parameters

    + id (string) - message id 

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 

            {
                "variation_index": 0
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Stop message [POST /newmessage/{id}/stop]

+ Parameters 

    + id (string) - message id 

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 

            {
                "variation_index": 0
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Start variation [POST /newmessage/{id}/variation/{index}/start]

Allowed for admins with permission `can_send_messages`

+ Parameters 

    + id (string, required) - message id
    + index (string, required) - variation index 0 or 1

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Stop variation [POST /newmessage/{id}/variation/{index}/stop]

+ Parameters 

    + id (string) - message id 
    + index (string) - variation index

+ Request (application/json)

    + Headers  
    
            X-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Delete variation [DELETE /newmessage/{id}/variation/{index}]

+ Parameters 

    + id (string) - message id 
    + index (string) - variation index

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Campaign collection [/campaign]

## List Campaigns [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        [
            {
                "id": "",
                "app_id": "",
                "state": "draft",
                "title": "Some title",
                "first_went_live_at": "2015-05-05T12:30:00",
                "last_went_live_at": "2015-05-05T12:30:00",
                "paused_at": "2015-05-05T12:30:00",
                "spacing": 24,
                "entry_predicates": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "comparison": "eq",
                        "value": ""
                    }
                ],
                "exit_predicates": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "comparison": "eq",
                        "value": ""
                    }
                ],
                "goal_predicates": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "comparison": "eq",
                        "value": ""
                    }
                ],
                "member_type": ": user",
                "stats": {
                    "entered_user_count": 0,
                    "exited_user_count": 0,
                    "goal_success_count": 0
                },
                "time_limit": 1,
                "messages": [
                    {}
                ]
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Reorder messages [POST /campaign/{id}/reorder]

+ Parametes

    + id (string, required) - Message id

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
            
    + Body 

            {
                "sort_orders": 1
            }

+ Response 200 (application/json)

        {
            "status": "ok"
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Rules collection [/rule]

## List rules [GET]

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
            
    + Body 
            
            {} 

+ Response 200 (application/json)

        [    
            {
                "id": "",
                "app_id": "",
                "state": "draft",
                "title": "Some title",
                "assignee_id": "",
                "sort_order": 1,
                "predicates": [
                                {
                                "attribute": "name",
                                "type": "string",
                                "comparison": "eq",
                                "value": ""
                                }
                              ]
            }
        ]

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

## Reorder rules [POST /rule/{id}/reorder]

+ Parametes

    + id (string, required) - Message id

+ Request (application/json)

    + Headers  
    
            x-Token: "valid_access_token"
            
    + Body 

            {
                "sort_orders": 1
            }

+ Response 200 (application/json)

        {
            "status": "ok",
        }

+ Response 401 (application/json)

        {
            "message": "Unauthorized"
        }

# Widget collection [/widget]

## Init /Socket/ [POST /widget/init]

+ Request (application/json)

    + Headers
    
    
    + Body

            {
                app_id: "app id", 
                email: "existed user email"
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok",
                "anonymous_session": "9a6ac8541339d84a07",
                "conversations":    [
                                    {
                                    "created_at": "2016-07-28T20:27:52.124Z",
                                    "updated_at": "2016-07-28T20:27:52.124Z",
                                    "conversation_parts": [],
                                    "id": "579a6ac8541ddb541e17265d",
                                    "conversation_message": {
                                                            "body": "Init by user",
                                                            "id": "579a6ac8541ddb541e17265e",
                                                            "created_at": "2016-07-28T20:45:03.894Z",
                                                            "author": {
                                                                        "type": "widget_user",
                                                                        "avatar": {
                                                                                    "square_25": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/24.jpg",
                                                                                    "square_50": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/73.jpg",
                                                                                    "square_128": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/128.jpg"
                                                                                    },
                                                                        "email": "quinn.heaney@gmail.com",
                                                                        "is_admin": false,
                                                                        "name": "Quinn Heaney",
                                                                        "first_name": "Quinn",
                                                                        "is_bot": false,
                                                                        "id": "57339d84a07bdfec090a6333"
                                                                        }
                                                            },
                                    "parts_count": 1,
                                    "read": false
                                    },
                                    {
                                    "last_participating_admin": {
                                    "name": "Admin Test",
                                    "avatar": null,
                                    "location": {},
                                    "id": "570e173660e3dac89655a11e"
                                    },
                                    "type": "conversation",
                                    "created_at": "2016-07-28T20:45:03.886Z",
                                    "updated_at": "2016-07-28T20:45:03.886Z",
                                    "conversation_parts": [
                                                            {
                                                            "body": "Hi!",
                                                            "type": "comment",
                                                            "id": "579fcca2bf6e7e725430e043",
                                                            "created_at": "2016-07-28T20:45:03.894Z",
                                                            "author": {
                                                                        "type": "widget_user",
                                                                        "avatar": {
                                                                                    "square_25": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/24.jpg",
                                                                                    "square_50": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/73.jpg",
                                                                                    "square_128": "https://s3.amazonaws.com/uifaces/faces/twitter/ytzvan/128.jpg"
                                                                                    },
                                                                        "email": "quinn.heaney@gmail.com",
                                                                        "is_admin": false,
                                                                        "name": "Quinn Heaney",
                                                                        "first_name": "Quinn",
                                                                        "is_bot": false,
                                                                        "id": "57339d84a07bdfec090a6333"
                                                                        }
                                                            }
                                                            ],
                                    "parts_count": 2,
                                    "id": "579a6ecfd468fe601ccf1890",
                                    "conversation_message": {
                                                            "type": "message",
                                                            "body": "<i>Hello, Quinn Heaney</i>",
                                                            "id": "579a6ecfd468fe601ccf1892",
                                                            "created_at": "2016-07-28T20:45:03.894Z",
                                                            "author": {
                                                                        "type": "Admin",
                                                                        "avatar": {},
                                                                        "email": "admin.test@gmail.com",
                                                                        "is_admin": true,
                                                                        "name": "Admin Test",
                                                                        "first_name": "Admin",
                                                                        "is_bot": false,
                                                                        "id": "570e173660e3dac89655a11e"
                                                                        }
                                                            },
                                    "read": false
                                    }
                                    ]
            }


### Ping /Socket/ [GET /widget/ping]

(?) In progress 

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {}

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "app": { 
                        "name": "TestApp",
                        "locale": "en",
                        "audio_enabled": true,
                        "last_active": "2016-08-01T20:38:57.579Z",
                        "auto_response": "We'll notify you here and by email when we reply.',
                        "show_powered_by": true,
                        "active_admins": [ {
                                            "id": "351239",
                                            "first_name": "admin",
                                            "last_name": null,
                                            "name": "admin",
                                            "avatar": {
                                                        "color": "d76966",
                                                        "image_urls": {
                                                                        "square_25": "",
                                                                        "square_50": "",
                                                                        "square_128": ""
                                                                        },
                                                        "image_url": ""
                                                        }
                                            } ],
                        "message": "Ask us anything, or share your feedback.",
                        "messenger_background": "background-1",
                        "expected_response_delay": "Replies as soon as they can"  // if not office hours, the text will be like "Back on Monday"
                        },
                "user": {
                        "id": 'user id',
                        "role": 'user role',
                        "locale": "en", // predefined
                        "email": "user@email",
                        "has_conversations": false,
                        },
                "modules": {
                            "messages": {
                                        "colors": {
                                                    "base": "#0071b2"
                                                    },
                                        "features": { // predefined
                                                    "rtm": true,
                                                    "inbound_messages": true,
                                                    "outbound_messages": true,
                                                    "inbound_lead_messaging": true,
                                                    "inbound_lead_messaging_docs_site": false,
                                                    "contact_messaging": true,
                                                    "visitor_messaging": true,
                                                    "server_side_interbot": false,
                                                    "sms_notification": false,
                                                    "borderless_enabled": false,
                                                    "interbot_notification_channels": false,
                                                    "exit_intent": false,
                                                    "video_messages": false
                                                    },
                                        activator: "#MyNextHitDefaultWidget", // predefined, 
                                        use_activator: true
                                        }            
                            "rtm": { // predefined
                                    "endpoints": [
                                                "https://dev.mynexthit.com/does-not-ready",
                                                "https://dev.mynexthit.com/does-not-ready-2",
                                                 ]
                                    }
                            },
                client_messages: [
                                    {
                                    id: 'auto message id',
                                    predicates: [{
                                                    type: "integer", 
                                                    attribute: "client_attributes.time_on_page", 
                                                    comparison: "eq", 
                                                    value: 20
                                                }]
                                    },
                                    {
                                    id: 'another auto message id',
                                    predicates: [{
                                                    type: "integer", 
                                                    attribute: "client_attributes.page_scrolled", 
                                                    comparison: "eq", 
                                                    value: 50
                                                }]
                                    },
                                    {
                                    id: 'another auto message id',
                                    predicates: [{
                                                    type: "integer", 
                                                    attribute: "client_attributes.time_on_page", 
                                                    comparison: "eq", 
                                                    value: 20
                                                  },
                                                  {
                                                    type: "integer", 
                                                    attribute: "client_attributes.page_scrolled", 
                                                    comparison: "eq", 
                                                    value: 50
                                                }]
                                    },
                                 ],
                "unread_conversation_ids": [],
                "unread_dismissed_conversation_ids": [],
                "total_unread_count": 0,
                install_mode: { // predefined, shows when user is not anonymous
                                anonymous: false,
                                subscribed_products: ["acquire", "engage", "support"]
                                }
            }


### Get conversations [GET /widget/conversations?{until}=2018-08-23T18%3A25%3A43.511Z&{limit}=10]

+ Parameters 

    + until (string) - datetime value Example: `2018-08-23T18:25:43.511Z`

    + limit (number) - the maximum number of conversations that may be returned Example: `10`

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {}

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok",
                "conversations": []
            }


### Fetch conversation [POST /widget/fetch]

(?) Response attributes? 

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                conversation_id: "conversation id", 
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "last_participating_admin": {
                                            "name": "Oleg",
                                            "status": "available",
                                            "avatar": {
                                                        "color": "d76966",
                                                        "image_urls": {
                                                                        "square_25": "https://static.intercomassets.com/avatars/351239/square_25/avatar.jpg_274898881-1469734491.jpg",
                                                                        "square_50": "https://static.intercomassets.com/avatars/351239/square_50/avatar.jpg_274898881-1469734491.jpg",
                                                                        "square_128": "https://static.intercomassets.com/avatars/351239/square_128/avatar.jpg_274898881-1469734491.jpg"
                                                                      },
                                                        "image_url": "https://static.intercomassets.com/avatars/351239/square_128/avatar.jpg_274898881-1469734491.jpg"
                                                       },
                                            "first_name": "Oleg",
                                            "id": "56be6602d18189818ecfd22a",
                                            "location": {
                                                        "city_name": "London",
                                                        "country_code": "GB",
                                                        "country_name": "GB",
                                                        "timezone": null,
                                                        "timezone_offset": null
                                                        },
                                            "last_active_at": null
                                            },
                "conversation_parts": [
                                        {
                                        "body": "Hi",
                                        "type": "comment",
                                        "created_at": "2016-08-06T16:41:54.691Z",
                                        "updated_at": "2016-08-06T16:41:54.691Z",
                                        "blocks": [
                                                    {
                                                    "type": "paragraph",
                                                    "text": "Hi"
                                                    },
                                                    {
                                                    "type": "image",
                                                    "url": "https://uploads.intercomcdn.com/i/o/9840942/458350cb88880159c1ed78e8/hutsul-alps.jpg",
                                                    "linkUrl": "https://www.google.com.ua/search?q=carpathians&amp;tbm=isch",
                                                    "trackingLinkUrl": null,
                                                    "width": 1200,
                                                    "height": 480
                                                    }
                                                  ],
                                        "id": "57a61352b52e747a4ab90c3b",
                                        "attachments": [
                                                        {
                                                        "name": "Mountains",
                                                        "content_type": null,
                                                        "type": "image",
                                                        "filesize": 82498,
                                                        "width": null,
                                                        "height": null,
                                                        "url": "https://uploads.intercomcdn.com/i/o/9840942/458350cb88880159c1ed78e8/hutsul-alps.jpg"
                                                        }
                                                        ],
                                        "author": {
                                                    "type": "widget_user",
                                                    "avatar": {},
                                                    "email": "beau.braun@gmail.com",
                                                    "is_admin": false,
                                                    "name": "Beau Braun",
                                                    "first_name": "Beau",
                                                    "is_bot": false,
                                                    "id": "57339ff13cc74d5057db3b2f"
                                                    }
                                        }
                                        ],
                "parts_count": 2,
                "created_at": "2016-08-06T16:37:55.570Z",
                "updated_at": "2016-08-06T16:37:55.570Z",
                "read_at": null,
                "id": "57a61263b52e747a4ab90c39",
                "conversation_message": {
                                        "body": "Hi,Beau",
                                        "type": "message",
                                        "created_at": "2016-08-06T16:48:03.157Z",
                                        "updated_at": "2016-08-06T16:48:03.157Z",
                                        "blocks": [
                                                    {
                                                    "type": "paragraph",
                                                    "text": "Hi, Beau"
                                                    },
                                                    {
                                                    "type": "attachmentList",
                                                    "attachments": [
                                                                    {
                                                                    "id": "57c6cf09bf9be4727cea0043",
                                                                    "name": "justafile.txt",
                                                                    "size": 9,
                                                                    "contentType": "text/plain",
                                                                    "url": "https://uploads.intercomcdn.com/i/o/9840765/af9591a1859d35e2c569167f/justafile.txt"
                                                                    }
                                                                    ]
                                                    }
                                                    ],
                                        "id": "57a614c311f3f8f65f794b50",
                                        "attachments": [
                                                        {
                                                        "name": "JustAFile",
                                                        "content_type": null,
                                                        "type": "upload",
                                                        "filesize": 9,
                                                        "width": null,
                                                        "height": null,
                                                        "url": "https://uploads.intercomcdn.com/i/o/9840765/af9591a1859d35e2c569167f/justafile.txt"
                                                        }
                                                        ],
                                        "author": {
                                                    "type": "Admin",
                                                    "avatar": {
                                                                "square_25": "https://static.intercomassets.com/avatars/351239/square_25/avatar.jpg_274898881-1469734491.jpg",
                                                                "square_50": "https://static.intercomassets.com/avatars/351239/square_50/avatar.jpg_274898881-1469734491.jpg",
                                                                "square_128": "https://static.intercomassets.com/avatars/351239/square_128/avatar.jpg_274898881-1469734491.jpg"
                                                                },
                                                    "email": "oleg@mynexthit.com",
                                                    "is_admin": true,
                                                    "name": "Oleg",
                                                    "first_name": "Oleg",
                                                    "is_bot": false,
                                                    "id": "56be6602d18189818ecfd22a"
                                                    },
                                        "seen_by_admin": "unseen"
                                        },
                "read": false
            }


### Read conversation [POST /widget/read]

Get data like "Fetch conversation" and mark conversation as "read"

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {}

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {}


### Dismiss conversation [POST /widget/dismiss]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                conversation_ids: ['id1', 'idN'] 
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok"
            }


### Reply reaction [POST /widget/react]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                conversation_id: 'conversation_id',
                reaction_index: 1 // Index from conversation_message.reactions_reply.reaction_set 
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok"
            }


### Send message /Socket/ [POST /widget/message]

If `operator_client_conditions` contains some conditions, the widget should take care of it, and when some condition is matched to use ... to inform the API Also conversation contain operator_client_conditions

(?) Need to copy attributes for request and response 

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                conversation_id: "conversation_id",
                message: "message"
                operator_client_conditions: []
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok",
                "message" : {
                            "body": "message",
                            "type": "comment",
                            "created_at": "2016-08-06T16:41:54.691Z",
                            "updated_at": "2016-08-06T16:41:54.691Z",
                            "blocks": [{
                                        "type": "paragraph",
                                        "text": "message"
                                      }],
                            "conversation_id": "57a61352babc747a4ab90c3b",
                            "id": "57a61352b52e747a4ab90c3b"
                            },
                operator_client_conditions: {
                                            "id": "entry-to-notificationchannels_entry-when-has_no_admin_parts",
                                            "predicates": [{
                                                            "attribute": "lastComposerEvent",
                                                            "type": "duration_delta",
                                                            "value": 2000
                                                          }]
                                            }
            }


### Add event [POST /widget/event]

(?) Clarify and add attributes 

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                event_name: "my_event",
                metadata: [
                            data_one: "abc",
                            date_two: 33
                          ]
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {}


### Capture data [POST /widget/capture]

+ Request 

    + Attributes 
    
        + email (string) - posible to capture email only for visitors
        + phone (string)

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                "status": "+1 ...",
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {}


### Conditions satisfied [POST /widget/conditions_satisfied]

When conditions from conversation `operator_client_conditions` is satisfied, widget should send request to this endpoint

+ Request 

    + Attributes 
    
        + conditions_id (string) - operator_client_conditions
        + conversation_id (string) 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                "conditions_id": "notificationchannels_entry-to-notificationchannels_exit-when-has_no_admin_parts",
                "conversation_id": "some id"
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                "status": "ok",
                "message": { ... },
                "operator_client_conditions": []
            }


### Send notification event /Socket/ [POST /widget/notification_event]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                eventName: "UserIsTyping",
                eventData: {
                            conversationId: "12345"
                           }    
            }  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                status: "ok"
            }        


### Match client attributes /Socket/ [POST /widget/message_match]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                "client_message_id": "id of auto message id from matched client attributes from ping.client_messages"
            }  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {
                // created conversation
            }     


### Collect link clicks /Socket/ [POST /widget/link_click]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                "url": "link url",
                "conversation_id": "conversation"
            }  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
    
            {}


## Send stat [POST /widget/stat]

+ Request (application/json)

    + Headers  
    
            x-anonymous_session: `a token from init response`
            
    + Body 
            
            {}  

+ Response 200 (application/json)

        {}  


### Verify installation [POST /widget/verify_installation]

+ Request 

    + Headers  
    
            Content-type: Application/json

    + Body 
            
            {}  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
            
            {}  


### Upload file [POST /widget/upload]

+ Attributes 
    
    + anonymous_session (string) - a token from init response

+ Request 

    + Headers  
    
            Content-Type: multipart/form-data; boundary=---------------------------22209274617181

    + Body 
            
            -----------------------------22209274617181
            Content-Disposition: form-data; name="anonymous_session"
            
            asc
            -----------------------------22209274617181
            Content-Disposition: form-data; name="file"; filename="1203t__evernote.png"
            Content-Type: image/png
            
            PNG  
            -----------------------------22209274617181--

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
            
            { 
                "id": "57c7581ea02fdb3c13149c09",
                "url": "https://site-backup-w.s3.amazonaws.com/mnh/attachments/bdfd5d5cbdfce52f1bcbf10ac85350f8bca21809.jpg"
                "name": "SomeImage",
                "type": "image",
                "filesize: 18954,
                "content_type": null,
                "width": null,
                "height": null
            }
            
            

### Page visits [PUT /widget/page_visited]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                url:'url',
                user_id: 'id',
            }  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
            
            {
                status: "ok"
            }
            
### Viewed video [PUT /widget/video_viewed]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                name:'name',
                viewed_length: 'viewed_length',
                viewed_percent: 'viewed_percent',
                user_id: 'id',
            }  

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
            
            {
                status: "ok"
            }
            
### Custom events [PUT /widget/custom_event]

+ Request 

    + Headers  
    
            Content-type: Application/json
            
    + Body 
            
            {
                name:'name',
                title: 'title',
                user_id: 'id',
            }

+ Response 200

    + Headers
        
            Content-type: application/json
    
    + Body 
            
            {
                status: "ok"
            }















t